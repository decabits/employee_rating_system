{"version":3,"sources":["../../src/plugins/PgBasicsPlugin.js"],"names":["defaultPgColumnFilter","_attr","_build","_context","identity","_","preventEmptyResult","obj","Object","keys","reduce","memo","key","fn","args","result","apply","length","stringifiedArgs","require","inspect","Error","String","omitWithRBACChecks","omit","entity","permission","ORDINARY_TABLE","VIEW","MATERIALIZED_VIEW","isTableLike","kind","classKind","EXECUTE","aclExecutable","tableEntity","READ","ALL","MANY","aclSelectable","attributes","some","attr","CREATE","aclInsertable","UPDATE","aclUpdatable","DELETE","aclDeletable","class","attributeEntity","klass","FILTER","ORDER","omitUnindexed","isIndexed","type","_omitUnindexedReadWarningGiven","console","log","describePgEntity","namespaceName","name","keyAttributes","map","a","join","includeAlias","getAlias","tags","value","endsWith","chalk","bold","t","c","f","p","r","v","m","e","error","id","sqlCommentByAddingTags","tagsToAdd","escape","str","replace","chr","assign","description","tagsSql","tag","tagValue","valueArray","Array","isArray","highlightOrNot","green","forEach","push","commentValue","sqlThing","identifier","PgBasicsPlugin","builder","pgStrictFunctions","pgColumnFilter","pgIgnoreRBAC","pgIgnoreIndexes","pgLegacyJsonUuid","pgOmit","baseOmit","hook","build","versions","version","liveCoordinator","registerProvider","PgLiveProvider","extend","graphileBuildPgVersion","pgSql","sql","pgQueryFromResolveData","pgAddStartEndCursor","addStartEndCursor","pgMakeProcField","makeProcField","pgParseIdentifier","parseIdentifier","pgViaTemporaryTable","viaTemporaryTable","pgField","pgPrepareAndRun","inflection","oldBuiltin","builtin","call","conditionType","typeName","upperCamelCase","inputType","rangeBoundType","rangeType","patchType","baseInputType","patchField","itemName","camelCase","orderByType","pluralize","edge","connection","_functionName","proc","_typeName","_tableName","table","_singularizedTableName","singularize","_columnName","_options","enumType","argument","index","orderByEnum","columnName","ascending","constantCase","orderByColumnEnum","skipRowId","orderByComputedColumnEnum","pseudoColumnName","computedColumn","domainType","enumName","inValue","$","tableNode","tableFieldName","allRows","allRowsSimple","functionMutationName","functionMutationResultFieldName","gqlType","plural","outputArgNames","resultFieldName","returnTypeId","functionQueryName","functionQueryNameList","functionPayloadType","functionInputType","functionOutputFieldName","outputArgName","tableType","column","_table","fieldName","computedColumnList","singleRelationByKeys","detailedKeys","_foreignTable","constraint","singleRelationByKeysBackwards","foreignSingleFieldName","foreignFieldName","manyRelationByKeys","manyRelationByKeysSimple","foreignSimpleFieldName","rowByUniqueKeys","updateByKeys","updateFieldName","deleteByKeys","deleteFieldName","updateByKeysInputType","deleteByKeysInputType","updateNode","deleteNode","deletedNodeId","updateNodeInputType","deleteNodeInputType","edgeField","recordFunctionReturnType","resultTypeName","recordFunctionConnection","recordFunctionEdge","scalarFunctionConnection","scalarFunctionEdge","createField","createInputType","createPayloadType","updatePayloadType","deletePayloadType"],"mappings":"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","sourcesContent":["// @flow\nimport * as sql from \"pg-sql2\";\nimport type { Plugin } from \"graphile-build\";\nimport { version } from \"../../package.json\";\nimport type {\n  PgProc,\n  PgType,\n  PgClass,\n  PgAttribute,\n  PgConstraint,\n  PgEntity,\n} from \"./PgIntrospectionPlugin\";\nimport pgField from \"./pgField\";\n\nimport queryFromResolveDataFactory from \"../queryFromResolveDataFactory\";\nimport addStartEndCursor from \"./addStartEndCursor\";\nimport baseOmit, {\n  CREATE,\n  READ,\n  UPDATE,\n  DELETE,\n  ALL,\n  MANY,\n  ORDER,\n  FILTER,\n  EXECUTE,\n} from \"../omit\";\nimport makeProcField from \"./makeProcField\";\nimport parseIdentifier from \"../parseIdentifier\";\nimport viaTemporaryTable from \"./viaTemporaryTable\";\nimport chalk from \"chalk\";\nimport pickBy from \"lodash/pickBy\";\nimport PgLiveProvider from \"../PgLiveProvider\";\nimport pgPrepareAndRun from \"../pgPrepareAndRun\";\n\nconst defaultPgColumnFilter = (_attr, _build, _context) => true;\ntype Keys = Array<{\n  column: string,\n  table: string,\n  schema: ?string,\n}>;\n\nconst identity = _ => _;\n\nexport function preventEmptyResult<\n  // eslint-disable-next-line flowtype/no-weak-types\n  O: { [key: string]: (...args: Array<any>) => string }\n>(obj: O): $ObjMap<O, <V>(V) => V> {\n  return Object.keys(obj).reduce((memo, key) => {\n    const fn = obj[key];\n    memo[key] = function(...args) {\n      const result = fn.apply(this, args);\n      if (typeof result !== \"string\" || result.length === 0) {\n        const stringifiedArgs = require(\"util\").inspect(args);\n        throw new Error(\n          `Inflector for '${key}' returned '${String(\n            result\n          )}'; expected non-empty string\\n` +\n            `See: https://github.com/graphile/graphile-build/blob/master/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js\\n` +\n            `Arguments passed to ${key}:\\n${stringifiedArgs}`\n        );\n      }\n      return result;\n    };\n    return memo;\n  }, {});\n}\n\nconst omitWithRBACChecks = omit => (\n  entity: PgProc | PgClass | PgAttribute | PgConstraint,\n  permission: string\n) => {\n  const ORDINARY_TABLE = \"r\";\n  const VIEW = \"v\";\n  const MATERIALIZED_VIEW = \"m\";\n  const isTableLike = entity =>\n    entity &&\n    entity.kind === \"class\" &&\n    (entity.classKind === ORDINARY_TABLE ||\n      entity.classKind === VIEW ||\n      entity.classKind === MATERIALIZED_VIEW);\n  if (entity.kind === \"procedure\") {\n    if (permission === EXECUTE && !entity.aclExecutable) {\n      return true;\n    }\n  } else if (entity.kind === \"class\" && isTableLike(entity)) {\n    const tableEntity: PgClass = entity;\n    if (\n      (permission === READ || permission === ALL || permission === MANY) &&\n      (!tableEntity.aclSelectable &&\n        !tableEntity.attributes.some(attr => attr.aclSelectable))\n    ) {\n      return true;\n    } else if (\n      permission === CREATE &&\n      (!tableEntity.aclInsertable &&\n        !tableEntity.attributes.some(attr => attr.aclInsertable))\n    ) {\n      return true;\n    } else if (\n      permission === UPDATE &&\n      (!tableEntity.aclUpdatable &&\n        !tableEntity.attributes.some(attr => attr.aclUpdatable))\n    ) {\n      return true;\n    } else if (permission === DELETE && !tableEntity.aclDeletable) {\n      return true;\n    }\n  } else if (entity.kind === \"attribute\" && isTableLike(entity.class)) {\n    const attributeEntity: PgAttribute = entity;\n\n    const klass = attributeEntity.class;\n    // Have we got *any* permissions on the table?\n    if (\n      klass.aclSelectable ||\n      klass.attributes.some(attr => attr.aclSelectable)\n    ) {\n      // Yes; this is a regular table; omit if RBAC permissions tell us to.\n      if (\n        (permission === READ ||\n          permission === FILTER ||\n          permission === ORDER) &&\n        !attributeEntity.aclSelectable\n      ) {\n        return true;\n      } else if (permission === CREATE && !attributeEntity.aclInsertable) {\n        return true;\n      } else if (permission === UPDATE && !attributeEntity.aclUpdatable) {\n        return true;\n      }\n    } else {\n      // No permissions on the table at all, so normal connections will skip\n      // over it. Thus we must be being exposed via a security definer function\n      // or similar, so we should expose all fields except those that are\n      // explicitly @omit-ed.\n    }\n  }\n  return omit(entity, permission);\n};\n\nconst omitUnindexed = omit => (\n  entity: PgProc | PgClass | PgAttribute | PgConstraint,\n  permission: string\n) => {\n  if (\n    entity.kind === \"attribute\" &&\n    !entity.isIndexed &&\n    (permission === \"filter\" || permission === \"order\")\n  ) {\n    return true;\n  }\n  if (\n    entity.kind === \"constraint\" &&\n    entity.type === \"f\" &&\n    !entity.isIndexed &&\n    permission === \"read\"\n  ) {\n    let klass = entity.class;\n    if (klass) {\n      if (!entity._omitUnindexedReadWarningGiven) {\n        // $FlowFixMe\n        entity._omitUnindexedReadWarningGiven = true;\n        // eslint-disable-next-line no-console\n        console.log(\n          \"%s\",\n          `Disabled 'read' permission for ${describePgEntity(\n            entity\n          )} because it isn't indexed. For more information see https://graphile.org/postgraphile/best-practices/ To fix, perform\\n\\n  CREATE INDEX ON ${`\"${\n            klass.namespaceName\n          }\".\"${klass.name}\"`}(\"${entity.keyAttributes\n            .map(a => a.name)\n            .join('\", \"')}\");`\n        );\n      }\n    }\n    return true;\n  }\n  return omit(entity, permission);\n};\n\nfunction describePgEntity(entity: PgEntity, includeAlias = true) {\n  const getAlias = !includeAlias\n    ? () => \"\"\n    : () => {\n        const tags = pickBy(\n          entity.tags,\n          (value, key) => key === \"name\" || key.endsWith(\"Name\")\n        );\n        if (Object.keys(tags).length) {\n          return ` (with smart comments: ${chalk.bold(\n            Object.keys(tags)\n              .map(t => `@${t} ${tags[t]}`)\n              .join(\" | \")\n          )})`;\n        }\n        return \"\";\n      };\n\n  try {\n    if (entity.kind === \"constraint\") {\n      return `constraint ${chalk.bold(\n        `\"${entity.name}\"`\n      )} on ${describePgEntity(entity.class, false)}${getAlias()}`;\n    } else if (entity.kind === \"class\") {\n      // see pg_class.relkind https://www.postgresql.org/docs/10/static/catalog-pg-class.html\n      const kind =\n        {\n          c: \"composite type\",\n          f: \"foreign table\",\n          p: \"partitioned table\",\n          r: \"table\",\n          v: \"view\",\n          m: \"materialized view\",\n        }[entity.classKind] || \"table-like\";\n      return `${kind} ${chalk.bold(\n        `\"${entity.namespaceName}\".\"${entity.name}\"`\n      )}${getAlias()}`;\n    } else if (entity.kind === \"procedure\") {\n      return `function ${chalk.bold(\n        `\"${entity.namespaceName}\".\"${entity.name}\"(...args...)`\n      )}${getAlias()}`;\n    } else if (entity.kind === \"attribute\") {\n      return `column ${chalk.bold(`\"${entity.name}\"`)} on ${describePgEntity(\n        entity.class,\n        false\n      )}${getAlias()}`;\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error(\"Error occurred while attempting to debug entity:\", entity);\n    // eslint-disable-next-line no-console\n    console.error(e);\n  }\n  return `entity of kind '${entity.kind}' with ${\n    typeof entity.id === \"string\" ? `oid '${entity.id}'` : \"\"\n  }`;\n}\n\nfunction sqlCommentByAddingTags(entity, tagsToAdd) {\n  // NOTE: this function is NOT intended to be SQL safe; it's for\n  // displaying in error messages. Nonetheless if you find issues with\n  // SQL compatibility, please send a PR or issue.\n\n  // Ref: https://www.postgresql.org/docs/current/static/sql-syntax-lexical.html#SQL-BACKSLASH-TABLE\n  const escape = str =>\n    str.replace(\n      /['\\\\\\b\\f\\n\\r\\t]/g,\n      chr =>\n        ({\n          \"\\b\": \"\\\\b\",\n          \"\\f\": \"\\\\f\",\n          \"\\n\": \"\\\\n\",\n          \"\\r\": \"\\\\r\",\n          \"\\t\": \"\\\\t\",\n        }[chr] || \"\\\\\" + chr)\n    );\n\n  // tagsToAdd is here twice to ensure that the keys in tagsToAdd come first, but that they also \"win\" any conflicts.\n  const tags = Object.assign({}, tagsToAdd, entity.tags, tagsToAdd);\n\n  const description = entity.description;\n  const tagsSql = Object.keys(tags)\n    .reduce((memo, tag) => {\n      const tagValue = tags[tag];\n      const valueArray = Array.isArray(tagValue) ? tagValue : [tagValue];\n      const highlightOrNot = tag in tagsToAdd ? chalk.bold.green : identity;\n      valueArray.forEach(value => {\n        memo.push(\n          highlightOrNot(\n            `@${escape(escape(tag))}${\n              value === true ? \"\" : \" \" + escape(escape(value))\n            }`\n          )\n        );\n      });\n      return memo;\n    }, [])\n    .join(\"\\\\n\");\n  const commentValue = `E'${tagsSql}${\n    description ? \"\\\\n\" + escape(description) : \"\"\n  }'`;\n  let sqlThing;\n  if (entity.kind === \"class\") {\n    const identifier = `\"${entity.namespaceName}\".\"${entity.name}\"`;\n    if (entity.classKind === \"r\") {\n      sqlThing = `TABLE ${identifier}`;\n    } else if (entity.classKind === \"v\") {\n      sqlThing = `VIEW ${identifier}`;\n    } else if (entity.classKind === \"m\") {\n      sqlThing = `MATERIALIZED VIEW ${identifier}`;\n    } else if (entity.classKind === \"c\") {\n      sqlThing = `TYPE ${identifier}`;\n    } else {\n      sqlThing = `PLEASE_SEND_A_PULL_REQUEST_TO_FIX_THIS ${identifier}`;\n    }\n  } else if (entity.kind === \"attribute\") {\n    sqlThing = `COLUMN \"${entity.class.namespaceName}\".\"${\n      entity.class.name\n    }\".\"${entity.name}\"`;\n  } else if (entity.kind === \"procedure\") {\n    sqlThing = `FUNCTION \"${entity.namespaceName}\".\"${\n      entity.name\n    }\"(...arg types go here...)`;\n  } else if (entity.kind === \"constraint\") {\n    // TODO: TEST!\n    sqlThing = `CONSTRAINT \"${entity.name}\" ON \"${\n      entity.class.namespaceName\n    }\".\"${entity.class.name}\"`;\n  } else {\n    sqlThing = `UNKNOWN_ENTITY_PLEASE_SEND_A_PULL_REQUEST`;\n  }\n\n  return `COMMENT ON ${sqlThing} IS ${commentValue};`;\n}\n\nexport default (function PgBasicsPlugin(\n  builder,\n  {\n    pgStrictFunctions = false,\n    pgColumnFilter = defaultPgColumnFilter,\n    pgIgnoreRBAC = false,\n    pgIgnoreIndexes = true, // TODO:v5: change this to false\n    pgLegacyJsonUuid = false, // TODO:v5: remove this\n  }\n) {\n  let pgOmit = baseOmit;\n  if (!pgIgnoreRBAC) {\n    pgOmit = omitWithRBACChecks(pgOmit);\n  }\n  if (!pgIgnoreIndexes) {\n    pgOmit = omitUnindexed(pgOmit);\n  }\n  builder.hook(\n    \"build\",\n    build => {\n      build.versions[\"graphile-build-pg\"] = version;\n      build.liveCoordinator.registerProvider(new PgLiveProvider());\n      return build.extend(build, {\n        graphileBuildPgVersion: version,\n        pgSql: sql,\n        pgStrictFunctions,\n        pgColumnFilter,\n\n        // TODO:v5: remove this workaround\n        // BEWARE: this may be overridden in PgIntrospectionPlugin for PG < 9.5\n        pgQueryFromResolveData: queryFromResolveDataFactory(),\n\n        pgAddStartEndCursor: addStartEndCursor,\n        pgOmit,\n        pgMakeProcField: makeProcField,\n        pgParseIdentifier: parseIdentifier,\n        pgViaTemporaryTable: viaTemporaryTable,\n        describePgEntity,\n        pgField,\n        sqlCommentByAddingTags,\n        pgPrepareAndRun,\n      });\n    },\n    [\"PgBasics\"]\n  );\n\n  builder.hook(\n    \"inflection\",\n    (inflection, build) => {\n      // TODO:v5: move this to postgraphile-core\n      const oldBuiltin = inflection.builtin;\n      inflection.builtin = function(name) {\n        if (pgLegacyJsonUuid && name === \"JSON\") return \"Json\";\n        if (pgLegacyJsonUuid && name === \"UUID\") return \"Uuid\";\n        return oldBuiltin.call(this, name);\n      };\n\n      return build.extend(\n        inflection,\n        preventEmptyResult({\n          // These helpers are passed GraphQL type names as strings\n          conditionType(typeName: string) {\n            return this.upperCamelCase(`${typeName}-condition`);\n          },\n          inputType(typeName: string) {\n            return this.upperCamelCase(`${typeName}-input`);\n          },\n          rangeBoundType(typeName: string) {\n            return this.upperCamelCase(`${typeName}-range-bound`);\n          },\n          rangeType(typeName: string) {\n            return this.upperCamelCase(`${typeName}-range`);\n          },\n          patchType(typeName: string) {\n            return this.upperCamelCase(`${typeName}-patch`);\n          },\n          baseInputType(typeName: string) {\n            return this.upperCamelCase(`${typeName}-base-input`);\n          },\n          patchField(itemName: string) {\n            return this.camelCase(`${itemName}-patch`);\n          },\n          orderByType(typeName: string) {\n            return this.upperCamelCase(`${this.pluralize(typeName)}-order-by`);\n          },\n          edge(typeName: string) {\n            return this.upperCamelCase(`${this.pluralize(typeName)}-edge`);\n          },\n          connection(typeName: string) {\n            return this.upperCamelCase(\n              `${this.pluralize(typeName)}-connection`\n            );\n          },\n\n          // These helpers handle overrides via smart comments. They should only\n          // be used in other inflectors, hence the underscore prefix.\n          //\n          // IMPORTANT: do NOT do case transforms here, because detail can be\n          // lost, e.g.\n          // `constantCase(camelCase('foo_1')) !== constantCase('foo_1')`\n          _functionName(proc: PgProc) {\n            return proc.tags.name || proc.name;\n          },\n          _typeName(type: PgType) {\n            // 'type' introspection result\n            return type.tags.name || type.name;\n          },\n          _tableName(table: PgClass) {\n            return table.tags.name || table.type.tags.name || table.name;\n          },\n          _singularizedTableName(table: PgClass): string {\n            return this.singularize(this._tableName(table)).replace(\n              /.(?:(?:[_-]i|I)nput|(?:[_-]p|P)atch)$/,\n              \"$&_record\"\n            );\n          },\n          _columnName(attr: PgAttribute, _options?: { skipRowId?: boolean }) {\n            return attr.tags.name || attr.name;\n          },\n\n          // From here down, functions are passed database introspection results\n          enumType(type: PgType) {\n            return this.upperCamelCase(this._typeName(type));\n          },\n          argument(name: ?string, index: number) {\n            return this.camelCase(name || `arg${index}`);\n          },\n          orderByEnum(columnName, ascending) {\n            return this.constantCase(\n              `${columnName}_${ascending ? \"asc\" : \"desc\"}`\n            );\n          },\n          orderByColumnEnum(attr: PgAttribute, ascending: boolean) {\n            const columnName = this._columnName(attr, {\n              skipRowId: true, // Because we messed up 😔\n            });\n            return this.orderByEnum(columnName, ascending);\n          },\n          orderByComputedColumnEnum(\n            pseudoColumnName: string,\n            proc: PgProc,\n            table: PgClass,\n            ascending: boolean\n          ) {\n            const columnName = this.computedColumn(\n              pseudoColumnName,\n              proc,\n              table\n            );\n            return this.orderByEnum(columnName, ascending);\n          },\n          domainType(type: PgType) {\n            return this.upperCamelCase(this._typeName(type));\n          },\n          enumName(inValue: string) {\n            let value = inValue;\n\n            if (value === \"\") {\n              return \"_EMPTY_\";\n            }\n\n            // Some enums use asterisks to signify wildcards - this might be for\n            // the whole item, or prefixes/suffixes, or even in the middle.  This\n            // is provided on a best efforts basis, if it doesn't suit your\n            // purposes then please pass a custom inflector as mentioned below.\n            value = value\n              .replace(/\\*/g, \"_ASTERISK_\")\n              .replace(/^(_?)_+ASTERISK/, \"$1ASTERISK\")\n              .replace(/ASTERISK_(_?)_*$/, \"ASTERISK$1\");\n\n            // This is a best efforts replacement for common symbols that you\n            // might find in enums. Generally we only support enums that are\n            // alphanumeric, if these replacements don't work for you, you should\n            // pass a custom inflector that replaces this `enumName` method\n            // with one of your own chosing.\n            value =\n              {\n                // SQL comparison operators\n                \">\": \"GREATER_THAN\",\n                \">=\": \"GREATER_THAN_OR_EQUAL\",\n                \"=\": \"EQUAL\",\n                \"!=\": \"NOT_EQUAL\",\n                \"<>\": \"DIFFERENT\",\n                \"<=\": \"LESS_THAN_OR_EQUAL\",\n                \"<\": \"LESS_THAN\",\n\n                // PostgreSQL LIKE shortcuts\n                \"~~\": \"LIKE\",\n                \"~~*\": \"ILIKE\",\n                \"!~~\": \"NOT_LIKE\",\n                \"!~~*\": \"NOT_ILIKE\",\n\n                // '~' doesn't necessarily represent regexps, but the three\n                // operators following it likely do, so we'll use the word TILDE\n                // in all for consistency.\n                \"~\": \"TILDE\",\n                \"~*\": \"TILDE_ASTERISK\",\n                \"!~\": \"NOT_TILDE\",\n                \"!~*\": \"NOT_TILDE_ASTERISK\",\n\n                // A number of other symbols where we're not sure of their\n                // meaning.  We give them common generic names so that they're\n                // suitable for multiple purposes, e.g. favouring 'PLUS' over\n                // 'ADDITION' and 'DOT' over 'FULL_STOP'\n                \"%\": \"PERCENT\",\n                \"+\": \"PLUS\",\n                \"-\": \"MINUS\",\n                \"/\": \"SLASH\",\n                \"\\\\\": \"BACKSLASH\",\n                _: \"UNDERSCORE\",\n                \"#\": \"POUND\",\n                \"£\": \"STERLING\",\n                $: \"DOLLAR\",\n                \"&\": \"AMPERSAND\",\n                \"@\": \"AT\",\n                \"'\": \"APOSTROPHE\",\n                '\"': \"QUOTE\",\n                \"`\": \"BACKTICK\",\n                \":\": \"COLON\",\n                \";\": \"SEMICOLON\",\n                \"!\": \"EXCLAMATION_POINT\",\n                \"?\": \"QUESTION_MARK\",\n                \",\": \"COMMA\",\n                \".\": \"DOT\",\n                \"^\": \"CARET\",\n                \"|\": \"BAR\",\n                \"[\": \"OPEN_BRACKET\",\n                \"]\": \"CLOSE_BRACKET\",\n                \"(\": \"OPEN_PARENTHESIS\",\n                \")\": \"CLOSE_PARENTHESIS\",\n                \"{\": \"OPEN_BRACE\",\n                \"}\": \"CLOSE_BRACE\",\n              }[value] || value;\n            return value;\n          },\n\n          tableNode(table: PgClass) {\n            return this.camelCase(this._singularizedTableName(table));\n          },\n          tableFieldName(table: PgClass) {\n            return this.camelCase(this._singularizedTableName(table));\n          },\n          allRows(table: PgClass) {\n            return this.camelCase(\n              `all-${this.pluralize(this._singularizedTableName(table))}`\n            );\n          },\n          allRowsSimple(table: PgClass) {\n            return this.camelCase(\n              `all-${this.pluralize(this._singularizedTableName(table))}-list`\n            );\n          },\n          functionMutationName(proc: PgProc) {\n            return this.camelCase(this._functionName(proc));\n          },\n          functionMutationResultFieldName(\n            proc: PgProc,\n            gqlType,\n            plural: boolean = false,\n            outputArgNames: Array<string> = []\n          ) {\n            if (proc.tags.resultFieldName) {\n              return proc.tags.resultFieldName;\n            }\n            let name;\n            if (outputArgNames.length === 1 && outputArgNames[0] !== \"\") {\n              name = this.camelCase(outputArgNames[0]);\n            } else if (gqlType.name === \"Int\") {\n              name = \"integer\";\n            } else if (gqlType.name === \"Float\") {\n              name = \"float\";\n            } else if (gqlType.name === \"Boolean\") {\n              name = \"boolean\";\n            } else if (gqlType.name === \"String\") {\n              name = \"string\";\n            } else if (proc.returnTypeId === \"2249\") {\n              // returns a record type\n              name = \"result\";\n            } else {\n              name = this.camelCase(gqlType.name);\n            }\n            return plural ? this.pluralize(name) : name;\n          },\n          functionQueryName(proc: PgProc) {\n            return this.camelCase(this._functionName(proc));\n          },\n          functionQueryNameList(proc: PgProc) {\n            return this.camelCase(`${this._functionName(proc)}-list`);\n          },\n          functionPayloadType(proc: PgProc) {\n            return this.upperCamelCase(`${this._functionName(proc)}-payload`);\n          },\n          functionInputType(proc: PgProc) {\n            return this.upperCamelCase(`${this._functionName(proc)}-input`);\n          },\n          functionOutputFieldName(\n            proc: PgProc,\n            outputArgName: string,\n            index: number\n          ) {\n            return this.argument(outputArgName, index);\n          },\n          tableType(table: PgClass) {\n            return this.upperCamelCase(this._singularizedTableName(table));\n          },\n          column(attr: PgAttribute) {\n            return this.camelCase(this._columnName(attr));\n          },\n          computedColumn(\n            pseudoColumnName: string,\n            proc: PgProc,\n            _table: PgClass\n          ) {\n            return proc.tags.fieldName || this.camelCase(pseudoColumnName);\n          },\n          computedColumnList(\n            pseudoColumnName: string,\n            proc: PgProc,\n            _table: PgClass\n          ) {\n            return proc.tags.fieldName\n              ? proc.tags.fieldName + \"List\"\n              : this.camelCase(`${pseudoColumnName}-list`);\n          },\n          singleRelationByKeys(\n            detailedKeys: Keys,\n            table: PgClass,\n            _foreignTable: PgClass,\n            constraint: PgConstraint\n          ) {\n            if (constraint.tags.fieldName) {\n              return constraint.tags.fieldName;\n            }\n            return this.camelCase(\n              `${this._singularizedTableName(table)}-by-${detailedKeys\n                .map(key => this.column(key))\n                .join(\"-and-\")}`\n            );\n          },\n          singleRelationByKeysBackwards(\n            detailedKeys: Keys,\n            table: PgClass,\n            _foreignTable: PgClass,\n            constraint: PgConstraint\n          ) {\n            if (constraint.tags.foreignSingleFieldName) {\n              return constraint.tags.foreignSingleFieldName;\n            }\n            if (constraint.tags.foreignFieldName) {\n              return constraint.tags.foreignFieldName;\n            }\n            return this.singleRelationByKeys(\n              detailedKeys,\n              table,\n              _foreignTable,\n              constraint\n            );\n          },\n          manyRelationByKeys(\n            detailedKeys: Keys,\n            table: PgClass,\n            _foreignTable: PgClass,\n            constraint: PgConstraint\n          ) {\n            if (constraint.tags.foreignFieldName) {\n              return constraint.tags.foreignFieldName;\n            }\n            return this.camelCase(\n              `${this.pluralize(\n                this._singularizedTableName(table)\n              )}-by-${detailedKeys.map(key => this.column(key)).join(\"-and-\")}`\n            );\n          },\n          manyRelationByKeysSimple(\n            detailedKeys: Keys,\n            table: PgClass,\n            _foreignTable: PgClass,\n            constraint: PgConstraint\n          ) {\n            if (constraint.tags.foreignSimpleFieldName) {\n              return constraint.tags.foreignSimpleFieldName;\n            }\n            if (constraint.tags.foreignFieldName) {\n              return constraint.tags.foreignFieldName;\n            }\n            return this.camelCase(\n              `${this.pluralize(\n                this._singularizedTableName(table)\n              )}-by-${detailedKeys\n                .map(key => this.column(key))\n                .join(\"-and-\")}-list`\n            );\n          },\n          rowByUniqueKeys(\n            detailedKeys: Keys,\n            table: PgClass,\n            constraint: PgConstraint\n          ) {\n            if (constraint.tags.fieldName) {\n              return constraint.tags.fieldName;\n            }\n            return this.camelCase(\n              `${this._singularizedTableName(table)}-by-${detailedKeys\n                .map(key => this.column(key))\n                .join(\"-and-\")}`\n            );\n          },\n          updateByKeys(\n            detailedKeys: Keys,\n            table: PgClass,\n            constraint: PgConstraint\n          ) {\n            if (constraint.tags.updateFieldName) {\n              return constraint.tags.updateFieldName;\n            }\n            return this.camelCase(\n              `update-${this._singularizedTableName(\n                table\n              )}-by-${detailedKeys.map(key => this.column(key)).join(\"-and-\")}`\n            );\n          },\n          deleteByKeys(\n            detailedKeys: Keys,\n            table: PgClass,\n            constraint: PgConstraint\n          ) {\n            if (constraint.tags.deleteFieldName) {\n              return constraint.tags.deleteFieldName;\n            }\n            return this.camelCase(\n              `delete-${this._singularizedTableName(\n                table\n              )}-by-${detailedKeys.map(key => this.column(key)).join(\"-and-\")}`\n            );\n          },\n          updateByKeysInputType(\n            detailedKeys: Keys,\n            table: PgClass,\n            constraint: PgConstraint\n          ) {\n            if (constraint.tags.updateFieldName) {\n              return this.upperCamelCase(\n                `${constraint.tags.updateFieldName}-input`\n              );\n            }\n            return this.upperCamelCase(\n              `update-${this._singularizedTableName(\n                table\n              )}-by-${detailedKeys\n                .map(key => this.column(key))\n                .join(\"-and-\")}-input`\n            );\n          },\n          deleteByKeysInputType(\n            detailedKeys: Keys,\n            table: PgClass,\n            constraint: PgConstraint\n          ) {\n            if (constraint.tags.deleteFieldName) {\n              return this.upperCamelCase(\n                `${constraint.tags.deleteFieldName}-input`\n              );\n            }\n            return this.upperCamelCase(\n              `delete-${this._singularizedTableName(\n                table\n              )}-by-${detailedKeys\n                .map(key => this.column(key))\n                .join(\"-and-\")}-input`\n            );\n          },\n          updateNode(table: PgClass) {\n            return this.camelCase(\n              `update-${this._singularizedTableName(table)}`\n            );\n          },\n          deleteNode(table: PgClass) {\n            return this.camelCase(\n              `delete-${this._singularizedTableName(table)}`\n            );\n          },\n          deletedNodeId(table: PgClass) {\n            return this.camelCase(`deleted-${this.singularize(table.name)}-id`);\n          },\n          updateNodeInputType(table: PgClass) {\n            return this.upperCamelCase(\n              `update-${this._singularizedTableName(table)}-input`\n            );\n          },\n          deleteNodeInputType(table: PgClass) {\n            return this.upperCamelCase(\n              `delete-${this._singularizedTableName(table)}-input`\n            );\n          },\n          edgeField(table: PgClass) {\n            return this.camelCase(`${this._singularizedTableName(table)}-edge`);\n          },\n          recordFunctionReturnType(proc: PgProc) {\n            return (\n              proc.tags.resultTypeName ||\n              this.upperCamelCase(`${this._functionName(proc)}-record`)\n            );\n          },\n          recordFunctionConnection(proc: PgProc) {\n            return this.upperCamelCase(\n              `${this._functionName(proc)}-connection`\n            );\n          },\n          recordFunctionEdge(proc: PgProc) {\n            return this.upperCamelCase(\n              `${this.singularize(this._functionName(proc))}-edge`\n            );\n          },\n          scalarFunctionConnection(proc: PgProc) {\n            return this.upperCamelCase(\n              `${this._functionName(proc)}-connection`\n            );\n          },\n          scalarFunctionEdge(proc: PgProc) {\n            return this.upperCamelCase(\n              `${this.singularize(this._functionName(proc))}-edge`\n            );\n          },\n          createField(table: PgClass) {\n            return this.camelCase(\n              `create-${this._singularizedTableName(table)}`\n            );\n          },\n          createInputType(table: PgClass) {\n            return this.upperCamelCase(\n              `create-${this._singularizedTableName(table)}-input`\n            );\n          },\n          createPayloadType(table: PgClass) {\n            return this.upperCamelCase(\n              `create-${this._singularizedTableName(table)}-payload`\n            );\n          },\n          updatePayloadType(table: PgClass) {\n            return this.upperCamelCase(\n              `update-${this._singularizedTableName(table)}-payload`\n            );\n          },\n          deletePayloadType(table: PgClass) {\n            return this.upperCamelCase(\n              `delete-${this._singularizedTableName(table)}-payload`\n            );\n          },\n        }),\n        \"Default inflectors from PgBasicsPlugin. You can override these with `makeAddInflectorsPlugin(..., true)`.\"\n      );\n    },\n    [\"PgBasics\"]\n  );\n}: Plugin);\n"],"file":"PgBasicsPlugin.js"}