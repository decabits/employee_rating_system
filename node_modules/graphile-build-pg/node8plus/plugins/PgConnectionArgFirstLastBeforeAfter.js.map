{"version":3,"sources":["../../src/plugins/PgConnectionArgFirstLastBeforeAfter.js"],"names":["base64Decode","str","Buffer","from","String","toString","PgConnectionArgs","builder","hook","args","build","context","extend","getTypeByName","graphql","GraphQLInt","scope","isPgFieldConnection","isPgFieldSimpleCollection","pgFieldIntrospection","source","addArgDataGenerator","field","Self","kind","Cursor","connectionFirstLastBeforeAfter","first","offset","last","after","before","pgQuery","queryBuilder","addCursorConstraint","Error","cursor","isAfter","cursorValues","JSON","parse","addCursorCondition","e","description","type","name"],"mappings":"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","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nconst base64Decode = str => Buffer.from(String(str), \"base64\").toString(\"utf8\");\n\nexport default (function PgConnectionArgs(builder) {\n  builder.hook(\n    \"GraphQLObjectType:fields:field:args\",\n    (args, build, context) => {\n      const {\n        extend,\n        getTypeByName,\n        graphql: { GraphQLInt },\n      } = build;\n      const {\n        scope: {\n          isPgFieldConnection,\n          isPgFieldSimpleCollection,\n          pgFieldIntrospection: source,\n        },\n        addArgDataGenerator,\n        field,\n        Self,\n      } = context;\n\n      if (\n        !(isPgFieldConnection || isPgFieldSimpleCollection) ||\n        !source ||\n        (source.kind !== \"class\" && source.kind !== \"procedure\")\n      ) {\n        return args;\n      }\n      const Cursor = getTypeByName(\"Cursor\");\n\n      addArgDataGenerator(function connectionFirstLastBeforeAfter({\n        first,\n        offset,\n        last,\n        after,\n        before,\n      }) {\n        return {\n          pgQuery: queryBuilder => {\n            if (first != null) {\n              queryBuilder.first(first);\n            }\n            if (offset != null) {\n              queryBuilder.offset(offset);\n            }\n            if (isPgFieldConnection) {\n              if (after != null) {\n                addCursorConstraint(after, true);\n              }\n              if (before != null) {\n                addCursorConstraint(before, false);\n              }\n              if (last != null) {\n                if (first != null) {\n                  throw new Error(\n                    \"We don't support setting both first and last\"\n                  );\n                }\n                if (offset != null) {\n                  throw new Error(\n                    \"We don't support setting both offset and last\"\n                  );\n                }\n                queryBuilder.last(last);\n              }\n            }\n\n            function addCursorConstraint(cursor, isAfter) {\n              try {\n                const cursorValues = JSON.parse(base64Decode(cursor));\n                return queryBuilder.addCursorCondition(cursorValues, isAfter);\n              } catch (e) {\n                throw new Error(\n                  \"Invalid cursor, please enter a cursor from a previous request, or null.\"\n                );\n              }\n            }\n          },\n        };\n      });\n\n      return extend(\n        args,\n        {\n          first: {\n            description: \"Only read the first `n` values of the set.\",\n            type: GraphQLInt,\n          },\n          ...(isPgFieldConnection\n            ? {\n                last: {\n                  description: \"Only read the last `n` values of the set.\",\n                  type: GraphQLInt,\n                },\n              }\n            : null),\n          offset: {\n            description: isPgFieldConnection\n              ? \"Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.\"\n              : \"Skip the first `n` values.\",\n            type: GraphQLInt,\n          },\n          ...(isPgFieldConnection\n            ? {\n                before: {\n                  description:\n                    \"Read all values in the set before (above) this cursor.\",\n                  type: Cursor,\n                },\n                after: {\n                  description:\n                    \"Read all values in the set after (below) this cursor.\",\n                  type: Cursor,\n                },\n              }\n            : null),\n        },\n        isPgFieldConnection\n          ? `Adding connection pagination args to field '${field.name}' of '${\n              Self.name\n            }'`\n          : `Adding simple collection args to field '${field.name}' of '${\n              Self.name\n            }'`\n      );\n    },\n    [\"PgConnectionArgFirstLastBeforeAfter\"]\n  );\n}: Plugin);\n"],"file":"PgConnectionArgFirstLastBeforeAfter.js"}