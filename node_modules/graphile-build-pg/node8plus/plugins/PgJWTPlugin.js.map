{"version":3,"sources":["../../src/plugins/PgJWTPlugin.js"],"names":["PgJWTPlugin","builder","pgJwtTypeIdentifier","pgJwtSecret","hook","_","build","newWithHooks","pgSql","sql","pgIntrospectionResultsByKind","introspectionResultsByKind","pgRegisterGqlTypeByTypeId","pg2GqlMapper","pgTweaksByTypeId","pgTweakFragmentForTypeAndModifier","graphql","GraphQLScalarType","inflection","pgParseIdentifier","parseIdentifier","describePgEntity","Error","namespaceName","entityName","typeName","compositeClass","class","find","table","isSelectable","isInsertable","isUpdatable","isDeletable","name","compositeType","type","id","attributes","compositeTypeName","tableType","cb","JWTType","description","serialize","value","token","reduce","memo","attr","Object","assign","aud","audience","iss","issuer","exp","expiresIn","__origin","isPgJwtType","map","values","some","v","unmap","fragment","join","literal","identifier","typeModifier"],"mappings":"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","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport { sign as signJwt } from \"jsonwebtoken\";\n\nexport default (function PgJWTPlugin(\n  builder,\n  { pgJwtTypeIdentifier, pgJwtSecret }\n) {\n  builder.hook(\n    \"init\",\n    (_, build) => {\n      const {\n        newWithHooks,\n        pgSql: sql,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgRegisterGqlTypeByTypeId,\n        pg2GqlMapper,\n        pgTweaksByTypeId,\n        pgTweakFragmentForTypeAndModifier,\n        graphql: { GraphQLScalarType },\n        inflection,\n        pgParseIdentifier: parseIdentifier,\n        describePgEntity,\n      } = build;\n\n      if (!pgJwtTypeIdentifier) {\n        return _;\n      }\n      if (!pgJwtSecret) {\n        throw new Error(\n          \"pgJwtTypeIdentifier was specified without pgJwtSecret\"\n        );\n      }\n      const { namespaceName, entityName: typeName } = parseIdentifier(\n        pgJwtTypeIdentifier\n      );\n\n      const compositeClass = introspectionResultsByKind.class.find(\n        table =>\n          !table.isSelectable &&\n          !table.isInsertable &&\n          !table.isUpdatable &&\n          !table.isDeletable &&\n          table.name === typeName &&\n          table.namespaceName === namespaceName\n      );\n      if (!compositeClass) {\n        throw new Error(\n          `Could not find JWT type '\"${namespaceName}\".\"${typeName}\"'`\n        );\n      }\n      const compositeType = compositeClass.type;\n      if (!compositeType) {\n        throw new Error(\"Could not determine the type for JWT type\");\n      }\n      if (pg2GqlMapper[compositeType.id]) {\n        throw new Error(\"JWT type has already been overridden?\");\n      }\n      const attributes = compositeClass.attributes;\n\n      const compositeTypeName = inflection.tableType(compositeClass);\n\n      // NOTE: we deliberately do not create an input type\n      pgRegisterGqlTypeByTypeId(compositeType.id, cb => {\n        const JWTType = newWithHooks(\n          GraphQLScalarType,\n          {\n            name: compositeTypeName,\n            description:\n              \"A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519) which securely represents claims between two parties.\",\n            serialize(value) {\n              const token = attributes.reduce((memo, attr) => {\n                memo[attr.name] = value[attr.name];\n                return memo;\n              }, {});\n              return signJwt(\n                token,\n                pgJwtSecret,\n                Object.assign(\n                  {},\n                  token.aud\n                    ? null\n                    : {\n                        audience: \"postgraphile\",\n                      },\n                  token.iss\n                    ? null\n                    : {\n                        issuer: \"postgraphile\",\n                      },\n                  token.exp\n                    ? null\n                    : {\n                        expiresIn: \"1 day\",\n                      }\n                )\n              );\n            },\n          },\n          {\n            __origin: `Adding JWT type based on ${describePgEntity(\n              compositeType\n            )}`,\n            isPgJwtType: true,\n          }\n        );\n        cb(JWTType);\n\n        pg2GqlMapper[compositeType.id] = {\n          map: value => {\n            if (!value) return null;\n            const values = Object.values(value);\n            if (values.some(v => v != null)) {\n              return value;\n            }\n            return null;\n          },\n          unmap: () => {\n            throw new Error(\n              \"We don't support passing a JWT token into GraphQL currently\"\n            );\n          },\n        };\n\n        pgTweaksByTypeId[compositeType.id] = fragment =>\n          sql.fragment`json_build_object(${sql.join(\n            compositeClass.attributes.map(\n              attr =>\n                sql.fragment`${sql.literal(\n                  attr.name\n                )}::text, ${pgTweakFragmentForTypeAndModifier(\n                  sql.fragment`(${fragment}).${sql.identifier(attr.name)}`,\n                  attr.type,\n                  attr.typeModifier,\n                  {}\n                )}`\n            ),\n            \", \"\n          )})`;\n      });\n      return _;\n    },\n    [\"PgJWT\"],\n    [],\n    [\"PgIntrospection\"]\n  );\n}: Plugin);\n"],"file":"PgJWTPlugin.js"}