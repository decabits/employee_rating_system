{"version":3,"sources":["../src/inflections.js"],"names":["outputMessages","deprecate","fn","message","args","indexOf","push","console","warn","Error","apply","deprecateEverything","obj","Object","keys","reduce","memo","key","defaultUtils","constantCase","camelCase","upperCamelCase","pluralize","singularize","newInflector","overrides","undefined","singularizeTable","tableName","replace","assign","argument","name","index","orderByType","typeName","orderByEnum","ascending","_table","_schema","domainType","enumName","inValue","value","_","$","enumType","conditionType","inputType","rangeBoundType","rangeType","patchType","patchField","itemName","tableNode","allRows","schema","functionName","functionPayloadType","functionInputType","tableType","column","singleRelationByKeys","detailedKeys","table","map","join","rowByUniqueKeys","updateByKeys","deleteByKeys","updateNode","deleteNode","updateByKeysInputType","deleteByKeysInputType","updateNodeInputType","deleteNodeInputType","manyRelationByKeys","_foreignTable","_foreignSchema","edge","edgeField","connection","scalarFunctionConnection","procName","_procSchema","scalarFunctionEdge","createField","createInputType","createPayloadType","updatePayloadType","deletePayloadType","defaultInflection"],"mappings":";;;;;;;AAEA;;AAQA;;AAVA;AAYA,MAAMA,cAAc,GAAG,EAAvB,C,CAEA;;AACA,SAASC,SAAT,CAAmBC,EAAnB,EAAyDC,OAAzD,EAA0E;AACxE,MAAI,OAAOD,EAAP,KAAc,UAAlB,EAA8B;AAC5B,WAAOA,EAAP;AACD;;AACD,SAAO,UAAS,GAAGE,IAAZ,EAAkB;AACvB,QAAIJ,cAAc,CAACK,OAAf,CAAuBF,OAAvB,MAAoC,CAAC,CAAzC,EAA4C;AAC1CH,MAAAA,cAAc,CAACM,IAAf,CAAoBH,OAApB,EAD0C,CAE1C;;AACAI,MAAAA,OAAO,CAACC,IAAR,CAAa,IAAIC,KAAJ,CAAUN,OAAV,CAAb;AACD;;AACD,WAAOD,EAAE,CAACQ,KAAH,CAAS,IAAT,EAAeN,IAAf,CAAP;AACD,GAPD;AAQD;;AAED,SAASO,mBAAT,CAA6BC,GAA7B,EAGG;AACD,SAAOC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBG,MAAjB,CAAwB,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC5CD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAYhB,SAAS,CACnBW,GAAG,CAACK,GAAD,CADgB,EAElB,+EAA8EA,GAAI,mPAFhE,CAArB;AAIA,WAAOD,IAAP;AACD,GANM,EAMJ,EANI,CAAP;AAOD;;AAgBM,MAAME,YAA4B,GAAG;AAC1CC,EAAAA,YAAY,EAAZA,2BAD0C;AAE1CC,EAAAA,SAAS,EAATA,wBAF0C;AAG1CC,EAAAA,cAAc,EAAdA,6BAH0C;AAI1CC,EAAAA,SAAS,EAATA,wBAJ0C;AAK1CC,EAAAA,WAAW,EAAXA;AAL0C,CAArC;;;AAcA,MAAMC,YAAY,GAAG,CAC1BC,SAAsC,GAAGC,SADf,EAE1B;AACEP,EAAAA,YADF;AAEEC,EAAAA,SAFF;AAGEC,EAAAA,cAHF;AAIEC,EAAAA,SAJF;AAKEC,EAAAA;AALF,IAMoBL,YARM,KASZ;AACd,WAASS,gBAAT,CAA0BC,SAA1B,EAAqD;AACnD,WAAOL,WAAW,CAACK,SAAD,CAAX,CAAuBC,OAAvB,CACL,uCADK,EAEL,WAFK,CAAP;AAID;;AAED,SAAOlB,mBAAmB,CACxB,wCACEE,MAAM,CAACiB,MAAP,CACE;AACER,IAAAA,SADF;;AAEES,IAAAA,QAAQ,CAACC,IAAD,EAAgBC,KAAhB,EAA+B;AACrC,aAAOb,SAAS,CAACY,IAAI,IAAK,MAAKC,KAAM,EAArB,CAAhB;AACD,KAJH;;AAKEC,IAAAA,WAAW,CAACC,QAAD,EAAmB;AAC5B,aAAOd,cAAc,CAAE,GAAEC,SAAS,CAACa,QAAD,CAAW,WAAxB,CAArB;AACD,KAPH;;AAQEC,IAAAA,WAAW,CACTJ,IADS,EAETK,SAFS,EAGTC,MAHS,EAITC,OAJS,EAKT;AACA,aAAOpB,YAAY,CAAE,GAAEa,IAAK,IAAGK,SAAS,GAAG,KAAH,GAAW,MAAO,EAAvC,CAAnB;AACD,KAfH;;AAgBEG,IAAAA,UAAU,CAACR,IAAD,EAAe;AACvB,aAAOX,cAAc,CAACW,IAAD,CAArB;AACD,KAlBH;;AAmBES,IAAAA,QAAQ,CAACC,OAAD,EAAkB;AACxB,UAAIC,KAAK,GAAGD,OAAZ;;AAEA,UAAIC,KAAK,KAAK,EAAd,EAAkB;AAChB,eAAO,SAAP;AACD,OALuB,CAOxB;AACA;AACA;AACA;;;AACAA,MAAAA,KAAK,GAAGA,KAAK,CACVd,OADK,CACG,KADH,EACU,YADV,EAELA,OAFK,CAEG,iBAFH,EAEsB,YAFtB,EAGLA,OAHK,CAGG,kBAHH,EAGuB,YAHvB,CAAR,CAXwB,CAgBxB;AACA;AACA;AACA;AACA;;AACAc,MAAAA,KAAK,GACH;AACE;AACA,aAAK,cAFP;AAGE,cAAM,uBAHR;AAIE,aAAK,OAJP;AAKE,cAAM,WALR;AAME,cAAM,WANR;AAOE,cAAM,oBAPR;AAQE,aAAK,WARP;AAUE;AACA,cAAM,MAXR;AAYE,eAAO,OAZT;AAaE,eAAO,UAbT;AAcE,gBAAQ,WAdV;AAgBE;AACA;AACA;AACA,aAAK,OAnBP;AAoBE,cAAM,gBApBR;AAqBE,cAAM,WArBR;AAsBE,eAAO,oBAtBT;AAwBE;AACA;AACA;AACA;AACA,aAAK,SA5BP;AA6BE,aAAK,MA7BP;AA8BE,aAAK,OA9BP;AA+BE,aAAK,OA/BP;AAgCE,cAAM,WAhCR;AAiCEC,QAAAA,CAAC,EAAE,YAjCL;AAkCE,aAAK,OAlCP;AAmCE,aAAK,UAnCP;AAoCEC,QAAAA,CAAC,EAAE,QApCL;AAqCE,aAAK,WArCP;AAsCE,aAAK,IAtCP;AAuCE,aAAK,YAvCP;AAwCE,aAAK,OAxCP;AAyCE,aAAK,UAzCP;AA0CE,aAAK,OA1CP;AA2CE,aAAK,WA3CP;AA4CE,aAAK,mBA5CP;AA6CE,aAAK,eA7CP;AA8CE,aAAK,OA9CP;AA+CE,aAAK,KA/CP;AAgDE,aAAK,OAhDP;AAiDE,aAAK,KAjDP;AAkDE,aAAK,cAlDP;AAmDE,aAAK,eAnDP;AAoDE,aAAK,kBApDP;AAqDE,aAAK,mBArDP;AAsDE,aAAK,YAtDP;AAuDE,aAAK;AAvDP,QAwDEF,KAxDF,KAwDYA,KAzDd;AA0DA,aAAOA,KAAP;AACD,KAnGH;;AAoGEG,IAAAA,QAAQ,CAACd,IAAD,EAAe;AACrB,aAAOX,cAAc,CAACW,IAAD,CAArB;AACD,KAtGH;;AAuGEe,IAAAA,aAAa,CAACZ,QAAD,EAAmB;AAC9B,aAAOd,cAAc,CAAE,GAAEc,QAAS,YAAb,CAArB;AACD,KAzGH;;AA0GEa,IAAAA,SAAS,CAACb,QAAD,EAAmB;AAC1B,aAAOd,cAAc,CAAE,GAAEc,QAAS,QAAb,CAArB;AACD,KA5GH;;AA6GEc,IAAAA,cAAc,CAACd,QAAD,EAAmB;AAC/B,aAAOd,cAAc,CAAE,GAAEc,QAAS,cAAb,CAArB;AACD,KA/GH;;AAgHEe,IAAAA,SAAS,CAACf,QAAD,EAAmB;AAC1B,aAAOd,cAAc,CAAE,GAAEc,QAAS,QAAb,CAArB;AACD,KAlHH;;AAmHEgB,IAAAA,SAAS,CAAChB,QAAD,EAAmB;AAC1B,aAAOd,cAAc,CAAE,GAAEc,QAAS,QAAb,CAArB;AACD,KArHH;;AAsHEiB,IAAAA,UAAU,CAACC,QAAD,EAAmB;AAC3B,aAAOjC,SAAS,CAAE,GAAEiC,QAAS,QAAb,CAAhB;AACD,KAxHH;;AAyHEzB,IAAAA,SAAS,CAACI,IAAD,EAAeO,OAAf,EAAiC;AACxC,aAAOnB,SAAS,CAACO,gBAAgB,CAACK,IAAD,CAAjB,CAAhB;AACD,KA3HH;;AA4HEsB,IAAAA,SAAS,CAACtB,IAAD,EAAeO,OAAf,EAAiC;AACxC,aAAOnB,SAAS,CAACO,gBAAgB,CAACK,IAAD,CAAjB,CAAhB;AACD,KA9HH;;AA+HEuB,IAAAA,OAAO,CAACvB,IAAD,EAAewB,MAAf,EAAgC;AACrC,aAAOpC,SAAS,CACb,OAAM,KAAKE,SAAL,CAAe,KAAKM,SAAL,CAAeI,IAAf,EAAqBwB,MAArB,CAAf,CAA6C,EADtC,CAAhB;AAGD,KAnIH;;AAoIEC,IAAAA,YAAY,CAACzB,IAAD,EAAeO,OAAf,EAAiC;AAC3C,aAAOnB,SAAS,CAACY,IAAD,CAAhB;AACD,KAtIH;;AAuIE0B,IAAAA,mBAAmB,CAAC1B,IAAD,EAAeO,OAAf,EAAiC;AAClD,aAAOlB,cAAc,CAAE,GAAEW,IAAK,UAAT,CAArB;AACD,KAzIH;;AA0IE2B,IAAAA,iBAAiB,CAAC3B,IAAD,EAAeO,OAAf,EAAiC;AAChD,aAAOlB,cAAc,CAAE,GAAEW,IAAK,QAAT,CAArB;AACD,KA5IH;;AA6IE4B,IAAAA,SAAS,CAAC5B,IAAD,EAAewB,MAAf,EAAgC;AACvC,aAAOnC,cAAc,CAAC,KAAKO,SAAL,CAAeI,IAAf,EAAqBwB,MAArB,CAAD,CAArB;AACD,KA/IH;;AAgJEK,IAAAA,MAAM,CAAC7B,IAAD,EAAeM,MAAf,EAA+BC,OAA/B,EAAiD;AACrD,aAAOnB,SAAS,CAACY,IAAD,CAAhB;AACD,KAlJH;;AAmJE8B,IAAAA,oBAAoB,CAClBC,YADkB,EAElBC,KAFkB,EAGlBR,MAHkB,EAIlB;AACA,aAAOpC,SAAS,CACb,GAAE,KAAKQ,SAAL,CAAeoC,KAAf,EAAsBR,MAAtB,CAA8B,OAAMO,YAAY,CAChDE,GADoC,CAChChD,GAAG,IAAI,KAAK4C,MAAL,CAAY5C,GAAG,CAAC4C,MAAhB,EAAwB5C,GAAG,CAAC+C,KAA5B,EAAmC/C,GAAG,CAACuC,MAAvC,CADyB,EAEpCU,IAFoC,CAE/B,OAF+B,CAEtB,EAHH,CAAhB;AAKD,KA7JH;;AA8JEC,IAAAA,eAAe,CAACJ,YAAD,EAAqBC,KAArB,EAAoCR,MAApC,EAAqD;AAClE,aAAOpC,SAAS,CACb,GAAE,KAAKQ,SAAL,CAAeoC,KAAf,EAAsBR,MAAtB,CAA8B,OAAMO,YAAY,CAChDE,GADoC,CAChChD,GAAG,IAAI,KAAK4C,MAAL,CAAY5C,GAAG,CAAC4C,MAAhB,EAAwB5C,GAAG,CAAC+C,KAA5B,EAAmC/C,GAAG,CAACuC,MAAvC,CADyB,EAEpCU,IAFoC,CAE/B,OAF+B,CAEtB,EAHH,CAAhB;AAKD,KApKH;;AAqKEE,IAAAA,YAAY,CAACL,YAAD,EAAqBC,KAArB,EAAoCR,MAApC,EAAqD;AAC/D,aAAOpC,SAAS,CACb,UAAS,KAAKQ,SAAL,CAAeoC,KAAf,EAAsBR,MAAtB,CAA8B,OAAMO,YAAY,CACvDE,GAD2C,CACvChD,GAAG,IAAI,KAAK4C,MAAL,CAAY5C,GAAG,CAAC4C,MAAhB,EAAwB5C,GAAG,CAAC+C,KAA5B,EAAmC/C,GAAG,CAACuC,MAAvC,CADgC,EAE3CU,IAF2C,CAEtC,OAFsC,CAE7B,EAHH,CAAhB;AAKD,KA3KH;;AA4KEG,IAAAA,YAAY,CAACN,YAAD,EAAqBC,KAArB,EAAoCR,MAApC,EAAqD;AAC/D,aAAOpC,SAAS,CACb,UAAS,KAAKQ,SAAL,CAAeoC,KAAf,EAAsBR,MAAtB,CAA8B,OAAMO,YAAY,CACvDE,GAD2C,CACvChD,GAAG,IAAI,KAAK4C,MAAL,CAAY5C,GAAG,CAAC4C,MAAhB,EAAwB5C,GAAG,CAAC+C,KAA5B,EAAmC/C,GAAG,CAACuC,MAAvC,CADgC,EAE3CU,IAF2C,CAEtC,OAFsC,CAE7B,EAHH,CAAhB;AAKD,KAlLH;;AAmLEI,IAAAA,UAAU,CAACtC,IAAD,EAAeO,OAAf,EAAiC;AACzC,aAAOnB,SAAS,CAAE,UAASO,gBAAgB,CAACK,IAAD,CAAO,EAAlC,CAAhB;AACD,KArLH;;AAsLEuC,IAAAA,UAAU,CAACvC,IAAD,EAAeO,OAAf,EAAiC;AACzC,aAAOnB,SAAS,CAAE,UAASO,gBAAgB,CAACK,IAAD,CAAO,EAAlC,CAAhB;AACD,KAxLH;;AAyLEwC,IAAAA,qBAAqB,CACnBT,YADmB,EAEnB/B,IAFmB,EAGnBO,OAHmB,EAInB;AACA,aAAOlB,cAAc,CAClB,UAASM,gBAAgB,CAACK,IAAD,CAAO,OAAM+B,YAAY,CAChDE,GADoC,CAChChD,GAAG,IAAI,KAAK4C,MAAL,CAAY5C,GAAG,CAAC4C,MAAhB,EAAwB5C,GAAG,CAAC+C,KAA5B,EAAmC/C,GAAG,CAACuC,MAAvC,CADyB,EAEpCU,IAFoC,CAE/B,OAF+B,CAEtB,QAHE,CAArB;AAKD,KAnMH;;AAoMEO,IAAAA,qBAAqB,CACnBV,YADmB,EAEnB/B,IAFmB,EAGnBO,OAHmB,EAInB;AACA,aAAOlB,cAAc,CAClB,UAASM,gBAAgB,CAACK,IAAD,CAAO,OAAM+B,YAAY,CAChDE,GADoC,CAChChD,GAAG,IAAI,KAAK4C,MAAL,CAAY5C,GAAG,CAAC4C,MAAhB,EAAwB5C,GAAG,CAAC+C,KAA5B,EAAmC/C,GAAG,CAACuC,MAAvC,CADyB,EAEpCU,IAFoC,CAE/B,OAF+B,CAEtB,QAHE,CAArB;AAKD,KA9MH;;AA+MEQ,IAAAA,mBAAmB,CAAC1C,IAAD,EAAeO,OAAf,EAAiC;AAClD,aAAOlB,cAAc,CAAE,UAASM,gBAAgB,CAACK,IAAD,CAAO,QAAlC,CAArB;AACD,KAjNH;;AAkNE2C,IAAAA,mBAAmB,CAAC3C,IAAD,EAAeO,OAAf,EAAiC;AAClD,aAAOlB,cAAc,CAAE,UAASM,gBAAgB,CAACK,IAAD,CAAO,QAAlC,CAArB;AACD,KApNH;;AAqNE4C,IAAAA,kBAAkB,CAChBb,YADgB,EAEhBC,KAFgB,EAGhBR,MAHgB,EAIhBqB,aAJgB,EAKhBC,cALgB,EAMhB;AACA,aAAO1D,SAAS,CACb,GAAE,KAAKE,SAAL,CACD,KAAKM,SAAL,CAAeoC,KAAf,EAAsBR,MAAtB,CADC,CAED,OAAMO,YAAY,CACjBE,GADK,CACDhD,GAAG,IAAI,KAAK4C,MAAL,CAAY5C,GAAG,CAAC4C,MAAhB,EAAwB5C,GAAG,CAAC+C,KAA5B,EAAmC/C,GAAG,CAACuC,MAAvC,CADN,EAELU,IAFK,CAEA,OAFA,CAES,EALH,CAAhB;AAOD,KAnOH;;AAoOEa,IAAAA,IAAI,CAAC5C,QAAD,EAAmB;AACrB,aAAOd,cAAc,CAAE,GAAEC,SAAS,CAACa,QAAD,CAAW,OAAxB,CAArB;AACD,KAtOH;;AAuOE6C,IAAAA,SAAS,CAAChD,IAAD,EAAeO,OAAf,EAAiC;AACxC,aAAOnB,SAAS,CAAE,GAAEO,gBAAgB,CAACK,IAAD,CAAO,OAA3B,CAAhB;AACD,KAzOH;;AA0OEiD,IAAAA,UAAU,CAAC9C,QAAD,EAAmB;AAC3B,aAAOd,cAAc,CAAE,GAAE,KAAKC,SAAL,CAAea,QAAf,CAAyB,aAA7B,CAArB;AACD,KA5OH;;AA6OE+C,IAAAA,wBAAwB,CAACC,QAAD,EAAmBC,WAAnB,EAAyC;AAC/D,aAAO/D,cAAc,CAAE,GAAE8D,QAAS,aAAb,CAArB;AACD,KA/OH;;AAgPEE,IAAAA,kBAAkB,CAACF,QAAD,EAAmBC,WAAnB,EAAyC;AACzD,aAAO/D,cAAc,CAAE,GAAE8D,QAAS,OAAb,CAArB;AACD,KAlPH;;AAmPEG,IAAAA,WAAW,CAACtD,IAAD,EAAeO,OAAf,EAAiC;AAC1C,aAAOnB,SAAS,CAAE,UAASO,gBAAgB,CAACK,IAAD,CAAO,EAAlC,CAAhB;AACD,KArPH;;AAsPEuD,IAAAA,eAAe,CAACvD,IAAD,EAAeO,OAAf,EAAiC;AAC9C,aAAOlB,cAAc,CAAE,UAASM,gBAAgB,CAACK,IAAD,CAAO,QAAlC,CAArB;AACD,KAxPH;;AAyPEwD,IAAAA,iBAAiB,CAACxD,IAAD,EAAeO,OAAf,EAAiC;AAChD,aAAOlB,cAAc,CAAE,UAASM,gBAAgB,CAACK,IAAD,CAAO,UAAlC,CAArB;AACD,KA3PH;;AA4PEyD,IAAAA,iBAAiB,CAACzD,IAAD,EAAeO,OAAf,EAAiC;AAChD,aAAOlB,cAAc,CAAE,UAASM,gBAAgB,CAACK,IAAD,CAAO,UAAlC,CAArB;AACD,KA9PH;;AA+PE0D,IAAAA,iBAAiB,CAAC1D,IAAD,EAAeO,OAAf,EAAiC;AAChD,aAAOlB,cAAc,CAAE,UAASM,gBAAgB,CAACK,IAAD,CAAO,UAAlC,CAArB;AACD;;AAjQH,GADF,EAoQEP,SApQF,CADF,CADwB,CAA1B;AA0QD,CA3RM;;;AA6RA,MAAMkE,iBAAiB,GAAGnE,YAAY,EAAtC","sourcesContent":["/* THIS ENTIRE FILE IS DEPRECATED. DO NOT USE THIS. DO NOT EDIT THIS. */\n// @flow\nimport {\n  upperCamelCase,\n  camelCase,\n  constantCase,\n  pluralize,\n  singularize,\n} from \"graphile-build\";\n\nimport { preventEmptyResult } from \"./plugins/PgBasicsPlugin\";\n\nconst outputMessages = [];\n\n// eslint-disable-next-line flowtype/no-weak-types\nfunction deprecate(fn: (...input: Array<any>) => string, message: string) {\n  if (typeof fn !== \"function\") {\n    return fn;\n  }\n  return function(...args) {\n    if (outputMessages.indexOf(message) === -1) {\n      outputMessages.push(message);\n      // eslint-disable-next-line no-console\n      console.warn(new Error(message));\n    }\n    return fn.apply(this, args);\n  };\n}\n\nfunction deprecateEverything(obj: {\n  // eslint-disable-next-line flowtype/no-weak-types\n  [string]: (...input: Array<any>) => string,\n}) {\n  return Object.keys(obj).reduce((memo, key) => {\n    memo[key] = deprecate(\n      obj[key],\n      `Something (probably a plugin) called the old inflection system (inflector: '${key}'). This system has been deprecated since 4.0.0-beta.6 (4th May 2018) and is not used internally so using it may cause inconsistencies, instead please use the plugin-capable inflection system https://www.graphile.org/postgraphile/inflection/`\n    );\n    return memo;\n  }, {});\n}\n\ntype Keys = Array<{\n  column: string,\n  table: string,\n  schema: ?string,\n}>;\n\ntype InflectorUtils = {|\n  constantCase: string => string,\n  camelCase: string => string,\n  upperCamelCase: string => string,\n  pluralize: string => string,\n  singularize: string => string,\n|};\n\nexport const defaultUtils: InflectorUtils = {\n  constantCase,\n  camelCase,\n  upperCamelCase,\n  pluralize,\n  singularize,\n};\n\nexport type Inflector = {\n  // TODO: tighten this up!\n  // eslint-disable-next-line flowtype/no-weak-types\n  [string]: (...input: Array<any>) => string,\n};\n\nexport const newInflector = (\n  overrides: ?{ [string]: () => string } = undefined,\n  {\n    constantCase,\n    camelCase,\n    upperCamelCase,\n    pluralize,\n    singularize,\n  }: InflectorUtils = defaultUtils\n): Inflector => {\n  function singularizeTable(tableName: string): string {\n    return singularize(tableName).replace(\n      /.(?:(?:[_-]i|I)nput|(?:[_-]p|P)atch)$/,\n      \"$&_record\"\n    );\n  }\n\n  return deprecateEverything(\n    preventEmptyResult(\n      Object.assign(\n        {\n          pluralize,\n          argument(name: ?string, index: number) {\n            return camelCase(name || `arg${index}`);\n          },\n          orderByType(typeName: string) {\n            return upperCamelCase(`${pluralize(typeName)}-order-by`);\n          },\n          orderByEnum(\n            name: string,\n            ascending: boolean,\n            _table: string,\n            _schema: ?string\n          ) {\n            return constantCase(`${name}_${ascending ? \"asc\" : \"desc\"}`);\n          },\n          domainType(name: string) {\n            return upperCamelCase(name);\n          },\n          enumName(inValue: string) {\n            let value = inValue;\n\n            if (value === \"\") {\n              return \"_EMPTY_\";\n            }\n\n            // Some enums use asterisks to signify wildcards - this might be for\n            // the whole item, or prefixes/suffixes, or even in the middle.  This\n            // is provided on a best efforts basis, if it doesn't suit your\n            // purposes then please pass a custom inflector as mentioned below.\n            value = value\n              .replace(/\\*/g, \"_ASTERISK_\")\n              .replace(/^(_?)_+ASTERISK/, \"$1ASTERISK\")\n              .replace(/ASTERISK_(_?)_*$/, \"ASTERISK$1\");\n\n            // This is a best efforts replacement for common symbols that you\n            // might find in enums. Generally we only support enums that are\n            // alphanumeric, if these replacements don't work for you, you should\n            // pass a custom inflector that replaces this `enumName` method\n            // with one of your own chosing.\n            value =\n              {\n                // SQL comparison operators\n                \">\": \"GREATER_THAN\",\n                \">=\": \"GREATER_THAN_OR_EQUAL\",\n                \"=\": \"EQUAL\",\n                \"!=\": \"NOT_EQUAL\",\n                \"<>\": \"DIFFERENT\",\n                \"<=\": \"LESS_THAN_OR_EQUAL\",\n                \"<\": \"LESS_THAN\",\n\n                // PostgreSQL LIKE shortcuts\n                \"~~\": \"LIKE\",\n                \"~~*\": \"ILIKE\",\n                \"!~~\": \"NOT_LIKE\",\n                \"!~~*\": \"NOT_ILIKE\",\n\n                // '~' doesn't necessarily represent regexps, but the three\n                // operators following it likely do, so we'll use the word TILDE\n                // in all for consistency.\n                \"~\": \"TILDE\",\n                \"~*\": \"TILDE_ASTERISK\",\n                \"!~\": \"NOT_TILDE\",\n                \"!~*\": \"NOT_TILDE_ASTERISK\",\n\n                // A number of other symbols where we're not sure of their\n                // meaning.  We give them common generic names so that they're\n                // suitable for multiple purposes, e.g. favouring 'PLUS' over\n                // 'ADDITION' and 'DOT' over 'FULL_STOP'\n                \"%\": \"PERCENT\",\n                \"+\": \"PLUS\",\n                \"-\": \"MINUS\",\n                \"/\": \"SLASH\",\n                \"\\\\\": \"BACKSLASH\",\n                _: \"UNDERSCORE\",\n                \"#\": \"POUND\",\n                \"£\": \"STERLING\",\n                $: \"DOLLAR\",\n                \"&\": \"AMPERSAND\",\n                \"@\": \"AT\",\n                \"'\": \"APOSTROPHE\",\n                '\"': \"QUOTE\",\n                \"`\": \"BACKTICK\",\n                \":\": \"COLON\",\n                \";\": \"SEMICOLON\",\n                \"!\": \"EXCLAMATION_POINT\",\n                \"?\": \"QUESTION_MARK\",\n                \",\": \"COMMA\",\n                \".\": \"DOT\",\n                \"^\": \"CARET\",\n                \"|\": \"BAR\",\n                \"[\": \"OPEN_BRACKET\",\n                \"]\": \"CLOSE_BRACKET\",\n                \"(\": \"OPEN_PARENTHESIS\",\n                \")\": \"CLOSE_PARENTHESIS\",\n                \"{\": \"OPEN_BRACE\",\n                \"}\": \"CLOSE_BRACE\",\n              }[value] || value;\n            return value;\n          },\n          enumType(name: string) {\n            return upperCamelCase(name);\n          },\n          conditionType(typeName: string) {\n            return upperCamelCase(`${typeName}-condition`);\n          },\n          inputType(typeName: string) {\n            return upperCamelCase(`${typeName}-input`);\n          },\n          rangeBoundType(typeName: string) {\n            return upperCamelCase(`${typeName}-range-bound`);\n          },\n          rangeType(typeName: string) {\n            return upperCamelCase(`${typeName}-range`);\n          },\n          patchType(typeName: string) {\n            return upperCamelCase(`${typeName}-patch`);\n          },\n          patchField(itemName: string) {\n            return camelCase(`${itemName}-patch`);\n          },\n          tableName(name: string, _schema: ?string) {\n            return camelCase(singularizeTable(name));\n          },\n          tableNode(name: string, _schema: ?string) {\n            return camelCase(singularizeTable(name));\n          },\n          allRows(name: string, schema: ?string) {\n            return camelCase(\n              `all-${this.pluralize(this.tableName(name, schema))}`\n            );\n          },\n          functionName(name: string, _schema: ?string) {\n            return camelCase(name);\n          },\n          functionPayloadType(name: string, _schema: ?string) {\n            return upperCamelCase(`${name}-payload`);\n          },\n          functionInputType(name: string, _schema: ?string) {\n            return upperCamelCase(`${name}-input`);\n          },\n          tableType(name: string, schema: ?string) {\n            return upperCamelCase(this.tableName(name, schema));\n          },\n          column(name: string, _table: string, _schema: ?string) {\n            return camelCase(name);\n          },\n          singleRelationByKeys(\n            detailedKeys: Keys,\n            table: string,\n            schema: ?string\n          ) {\n            return camelCase(\n              `${this.tableName(table, schema)}-by-${detailedKeys\n                .map(key => this.column(key.column, key.table, key.schema))\n                .join(\"-and-\")}`\n            );\n          },\n          rowByUniqueKeys(detailedKeys: Keys, table: string, schema: ?string) {\n            return camelCase(\n              `${this.tableName(table, schema)}-by-${detailedKeys\n                .map(key => this.column(key.column, key.table, key.schema))\n                .join(\"-and-\")}`\n            );\n          },\n          updateByKeys(detailedKeys: Keys, table: string, schema: ?string) {\n            return camelCase(\n              `update-${this.tableName(table, schema)}-by-${detailedKeys\n                .map(key => this.column(key.column, key.table, key.schema))\n                .join(\"-and-\")}`\n            );\n          },\n          deleteByKeys(detailedKeys: Keys, table: string, schema: ?string) {\n            return camelCase(\n              `delete-${this.tableName(table, schema)}-by-${detailedKeys\n                .map(key => this.column(key.column, key.table, key.schema))\n                .join(\"-and-\")}`\n            );\n          },\n          updateNode(name: string, _schema: ?string) {\n            return camelCase(`update-${singularizeTable(name)}`);\n          },\n          deleteNode(name: string, _schema: ?string) {\n            return camelCase(`delete-${singularizeTable(name)}`);\n          },\n          updateByKeysInputType(\n            detailedKeys: Keys,\n            name: string,\n            _schema: ?string\n          ) {\n            return upperCamelCase(\n              `update-${singularizeTable(name)}-by-${detailedKeys\n                .map(key => this.column(key.column, key.table, key.schema))\n                .join(\"-and-\")}-input`\n            );\n          },\n          deleteByKeysInputType(\n            detailedKeys: Keys,\n            name: string,\n            _schema: ?string\n          ) {\n            return upperCamelCase(\n              `delete-${singularizeTable(name)}-by-${detailedKeys\n                .map(key => this.column(key.column, key.table, key.schema))\n                .join(\"-and-\")}-input`\n            );\n          },\n          updateNodeInputType(name: string, _schema: ?string) {\n            return upperCamelCase(`update-${singularizeTable(name)}-input`);\n          },\n          deleteNodeInputType(name: string, _schema: ?string) {\n            return upperCamelCase(`delete-${singularizeTable(name)}-input`);\n          },\n          manyRelationByKeys(\n            detailedKeys: Keys,\n            table: string,\n            schema: ?string,\n            _foreignTable: string,\n            _foreignSchema: ?string\n          ) {\n            return camelCase(\n              `${this.pluralize(\n                this.tableName(table, schema)\n              )}-by-${detailedKeys\n                .map(key => this.column(key.column, key.table, key.schema))\n                .join(\"-and-\")}`\n            );\n          },\n          edge(typeName: string) {\n            return upperCamelCase(`${pluralize(typeName)}-edge`);\n          },\n          edgeField(name: string, _schema: ?string) {\n            return camelCase(`${singularizeTable(name)}-edge`);\n          },\n          connection(typeName: string) {\n            return upperCamelCase(`${this.pluralize(typeName)}-connection`);\n          },\n          scalarFunctionConnection(procName: string, _procSchema: ?string) {\n            return upperCamelCase(`${procName}-connection`);\n          },\n          scalarFunctionEdge(procName: string, _procSchema: ?string) {\n            return upperCamelCase(`${procName}-edge`);\n          },\n          createField(name: string, _schema: ?string) {\n            return camelCase(`create-${singularizeTable(name)}`);\n          },\n          createInputType(name: string, _schema: ?string) {\n            return upperCamelCase(`create-${singularizeTable(name)}-input`);\n          },\n          createPayloadType(name: string, _schema: ?string) {\n            return upperCamelCase(`create-${singularizeTable(name)}-payload`);\n          },\n          updatePayloadType(name: string, _schema: ?string) {\n            return upperCamelCase(`update-${singularizeTable(name)}-payload`);\n          },\n          deletePayloadType(name: string, _schema: ?string) {\n            return upperCamelCase(`delete-${singularizeTable(name)}-payload`);\n          },\n        },\n        overrides\n      )\n    )\n  );\n};\n\nexport const defaultInflection = newInflector();\n"],"file":"inflections.js"}