{"version":3,"sources":["../src/QueryBuilder.js"],"names":["isDev","process","env","POSTGRAPHILE_ENV","callIfNecessary","o","context","callIfNecessaryArray","Array","isArray","map","v","QueryBuilder","constructor","options","rootValue","supportsJSONB","locks","cursorComparator","select","selectCursor","from","join","whereBound","where","orderBy","orderIsUnique","first","last","limit","offset","finalized","selectedIdentifiers","data","cursorPrefix","lower","upper","beforeLock","liveConditions","compiledData","lock","lockContext","Object","freeze","queryBuilder","jsonbBuildObject","fields","length","fieldsChunks","chunkToJson","fieldsChunk","sql","fragment","expr","alias","literal","field","fn","checkLock","push","makeLiveCollection","table","cb","checkerGenerator","checkers","record","every","checker","parentQueryBuilder","Error","id","allRequirements","reduce","memo","_checkerGenerator","requirements","assign","value","keys","key","addLiveCondition","setCursorComparator","addCursorCondition","cursorValue","isAfter","exprGen","test","selectIdentifiers","primaryKey","primaryKeyConstraint","primaryKeys","keyAttributes","getTableAlias","identifier","name","Symbol","isLower","setOrderIsUnique","ascending","nullsFirst","limitGen","offsetGen","previous","isOrderUnique","getTableExpression","getSelectCursor","getOffset","getFinalLimitAndOffset","flip","Math","min","getFinalOffset","getFinalLimit","getOrderByExpressionsAndDirections","getSelectFieldsCount","lockEverything","buildSelectFields","sqlFragment","buildSelectJson","addNullCase","addNotDistinctFromNullCase","buildObject","buildWhereBoundClause","clauses","buildWhereClause","includeLowerBound","includeUpperBound","build","asJson","asJsonAggregate","onlyJsonField","useAsterisk","Number","flipAlias","aggAlias","_finalize","type","i","l","stack","seenFields","selects","valueOrGenerator","columnName","a","b","c","f","replace"],"mappings":"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","sourcesContent":["// @flow\nimport * as sql from \"pg-sql2\";\nimport type { SQL } from \"pg-sql2\";\nimport isSafeInteger from \"lodash/isSafeInteger\";\nimport chunk from \"lodash/chunk\";\nimport type { PgClass } from \"./plugins/PgIntrospectionPlugin\";\n\n// eslint-disable-next-line flowtype/no-weak-types\ntype GraphQLContext = any;\n\nconst isDev = process.env.POSTGRAPHILE_ENV === \"development\";\n\ntype GenContext = {\n  queryBuilder: QueryBuilder,\n};\ntype Gen<T> = (context: GenContext) => T;\n\nfunction callIfNecessary<T>(o: Gen<T> | T, context: GenContext): T {\n  if (typeof o === \"function\") {\n    return o(context);\n  } else {\n    return o;\n  }\n}\n\nfunction callIfNecessaryArray<T>(\n  o: Array<Gen<T> | T>,\n  context: GenContext\n): Array<T> {\n  if (Array.isArray(o)) {\n    return o.map(v => callIfNecessary(v, context));\n  } else {\n    return o;\n  }\n}\n\nexport type RawAlias = Symbol | string;\ntype SQLAlias = SQL;\ntype SQLGen = Gen<SQL> | SQL;\ntype NumberGen = Gen<number> | number;\ntype CursorValue = {};\ntype CursorComparator = (val: CursorValue, isAfter: boolean) => void;\n\nexport type QueryBuilderOptions = {\n  supportsJSONB?: boolean, // Defaults to true\n};\n\nclass QueryBuilder {\n  parentQueryBuilder: QueryBuilder | void;\n  context: GraphQLContext;\n  rootValue: any; // eslint-disable-line flowtype/no-weak-types\n  supportsJSONB: boolean;\n  locks: {\n    [string]: false | true | string,\n  };\n  finalized: boolean;\n  selectedIdentifiers: boolean;\n  data: {\n    cursorPrefix: Array<string>,\n    select: Array<[SQLGen, RawAlias]>,\n    selectCursor: ?SQLGen,\n    from: ?[SQLGen, SQLAlias],\n    join: Array<SQLGen>,\n    where: Array<SQLGen>,\n    whereBound: {\n      lower: Array<SQLGen>,\n      upper: Array<SQLGen>,\n    },\n    orderBy: Array<[SQLGen, boolean, boolean | null]>,\n    orderIsUnique: boolean,\n    limit: ?NumberGen,\n    offset: ?NumberGen,\n    first: ?number,\n    last: ?number,\n    beforeLock: {\n      [string]: Array<() => void> | null,\n    },\n    cursorComparator: ?CursorComparator,\n    liveConditions: Array<\n      // eslint-disable-next-line flowtype/no-weak-types\n      [(data: {}) => (record: any) => boolean, { [key: string]: SQL } | void]\n    >,\n  };\n  compiledData: {\n    cursorPrefix: Array<string>,\n    select: Array<[SQL, RawAlias]>,\n    selectCursor: ?SQL,\n    from: ?[SQL, SQLAlias],\n    join: Array<SQL>,\n    where: Array<SQL>,\n    whereBound: {\n      lower: Array<SQL>,\n      upper: Array<SQL>,\n    },\n    orderBy: Array<[SQL, boolean, boolean | null]>,\n    orderIsUnique: boolean,\n    limit: ?number,\n    offset: ?number,\n    first: ?number,\n    last: ?number,\n    cursorComparator: ?CursorComparator,\n  };\n  lockContext: {\n    queryBuilder: QueryBuilder,\n  };\n\n  constructor(\n    options: QueryBuilderOptions = {},\n    context: GraphQLContext = {},\n    rootValue?: any // eslint-disable-line flowtype/no-weak-types\n  ) {\n    this.context = context || {};\n    this.rootValue = rootValue;\n    this.supportsJSONB =\n      typeof options.supportsJSONB === \"undefined\" ||\n      options.supportsJSONB === null\n        ? true\n        : !!options.supportsJSONB;\n\n    this.locks = {\n      // As a performance optimisation, we're going to list a number of lock\n      // types so that V8 doesn't need to mutate the object too much\n      cursorComparator: false,\n      select: false,\n      selectCursor: false,\n      from: false,\n      join: false,\n      whereBound: false,\n      where: false,\n      orderBy: false,\n      orderIsUnique: false,\n      first: false,\n      last: false,\n      limit: false,\n      offset: false,\n    };\n    this.finalized = false;\n    this.selectedIdentifiers = false;\n    this.data = {\n      // TODO: refactor `cursorPrefix`, it shouldn't be here (or should at least have getters/setters)\n      cursorPrefix: [\"natural\"],\n      select: [],\n      selectCursor: null,\n      from: null,\n      join: [],\n      where: [],\n      whereBound: {\n        lower: [],\n        upper: [],\n      },\n      orderBy: [],\n      orderIsUnique: false,\n      limit: null,\n      offset: null,\n      first: null,\n      last: null,\n      beforeLock: {\n        // As a performance optimisation, we're going to list a number of lock\n        // types so that V8 doesn't need to mutate the object too much\n        cursorComparator: [],\n        select: [],\n        selectCursor: [],\n        from: [],\n        join: [],\n        whereBound: [],\n        where: [],\n        orderBy: [],\n        orderIsUnique: [],\n        first: [],\n        last: [],\n        limit: [],\n        offset: [],\n      },\n      cursorComparator: null,\n      liveConditions: [],\n    };\n    this.compiledData = {\n      cursorPrefix: [\"natural\"],\n      select: [],\n      selectCursor: null,\n      from: null,\n      join: [],\n      where: [],\n      whereBound: {\n        lower: [],\n        upper: [],\n      },\n      orderBy: [],\n      orderIsUnique: false,\n      limit: null,\n      offset: null,\n      first: null,\n      last: null,\n      cursorComparator: null,\n    };\n    this.beforeLock(\"select\", () => {\n      this.lock(\"selectCursor\");\n      if (this.compiledData.selectCursor) {\n        this.select(this.compiledData.selectCursor, \"__cursor\");\n      }\n    });\n    // 'whereBound' and 'natural' order might set offset/limit\n    this.beforeLock(\"where\", () => {\n      this.lock(\"whereBound\");\n    });\n    this.beforeLock(\"offset\", () => {\n      this.lock(\"whereBound\");\n    });\n    this.beforeLock(\"limit\", () => {\n      this.lock(\"whereBound\");\n    });\n    this.beforeLock(\"first\", () => {\n      this.lock(\"limit\");\n      this.lock(\"offset\");\n    });\n    this.beforeLock(\"last\", () => {\n      this.lock(\"limit\");\n      this.lock(\"offset\");\n    });\n    this.lockContext = Object.freeze({\n      queryBuilder: this,\n    });\n  }\n\n  // ----------------------------------------\n\n  // Helper function\n  jsonbBuildObject(fields: Array<[SQL, RawAlias]>) {\n    if (this.supportsJSONB && fields.length > 50) {\n      const fieldsChunks = chunk(fields, 50);\n      const chunkToJson = fieldsChunk =>\n        sql.fragment`jsonb_build_object(${sql.join(\n          fieldsChunk.map(\n            ([expr, alias]) =>\n              sql.fragment`${sql.literal(alias)}::text, ${expr}`\n          ),\n          \", \"\n        )})`;\n      return sql.fragment`(${sql.join(\n        fieldsChunks.map(chunkToJson),\n        \" || \"\n      )})::json`;\n    } else {\n      // PG9.4 will have issues with more than 100 parameters (50 keys)\n      return sql.fragment`json_build_object(${sql.join(\n        fields.map(\n          ([expr, alias]) => sql.fragment`${sql.literal(alias)}::text, ${expr}`\n        ),\n        \", \"\n      )})`;\n    }\n  }\n\n  // ----------------------------------------\n\n  beforeLock(field: string, fn: () => void) {\n    this.checkLock(field);\n    if (!this.data.beforeLock[field]) {\n      this.data.beforeLock[field] = [];\n    }\n    // $FlowFixMe\n    this.data.beforeLock[field].push(fn);\n  }\n\n  makeLiveCollection(\n    table: PgClass,\n    // eslint-disable-next-line flowtype/no-weak-types\n    cb?: (checker: (data: any) => (record: any) => boolean) => void\n  ) {\n    /* the actual condition doesn't matter hugely, 'select' should work */\n    if (!this.rootValue || !this.rootValue.liveConditions) return;\n    const liveConditions = this.data.liveConditions;\n    const checkerGenerator = data => {\n      // Compute this once.\n      const checkers = liveConditions.map(([checkerGenerator]) =>\n        checkerGenerator(data)\n      );\n      return record => checkers.every(checker => checker(record));\n    };\n    if (this.parentQueryBuilder) {\n      if (cb) {\n        throw new Error(\n          \"Either use parentQueryBuilder or pass callback, not both.\"\n        );\n      }\n      this.parentQueryBuilder.beforeLock(\"select\", () => {\n        const id = this.rootValue.liveConditions.push(checkerGenerator) - 1;\n        // BEWARE: it's easy to override others' conditions, and that will cause issues. Be sensible.\n        const allRequirements = this.data.liveConditions.reduce(\n          (memo, [_checkerGenerator, requirements]) =>\n            requirements ? Object.assign(memo, requirements) : memo,\n          {}\n        );\n        // $FlowFixMe\n        this.parentQueryBuilder.select(\n          sql.fragment`\\\njson_build_object('__id', ${sql.value(id)}::int\n${sql.join(\n  Object.keys(allRequirements).map(\n    key => sql.fragment`, ${sql.literal(key)}::text, ${allRequirements[key]}`\n  ),\n  \"\"\n)})`,\n          \"__live\"\n        );\n      });\n    } else if (cb) {\n      cb(checkerGenerator);\n    } else {\n      throw new Error(\n        \"makeLiveCollection was called without parentQueryBuilder and without callback\"\n      );\n    }\n  }\n\n  addLiveCondition(\n    // eslint-disable-next-line flowtype/no-weak-types\n    checkerGenerator: (data: {}) => (record: any) => boolean,\n    requirements?: { [key: string]: SQL }\n  ) {\n    if (requirements && !this.parentQueryBuilder) {\n      throw new Error(\n        \"There's no parentQueryBuilder, so there cannot be requirements\"\n      );\n    }\n    this.data.liveConditions.push([checkerGenerator, requirements]);\n  }\n\n  setCursorComparator(fn: CursorComparator) {\n    this.checkLock(\"cursorComparator\");\n    this.data.cursorComparator = fn;\n    this.lock(\"cursorComparator\");\n  }\n  addCursorCondition(cursorValue: CursorValue, isAfter: boolean) {\n    this.beforeLock(\"whereBound\", () => {\n      this.lock(\"cursorComparator\");\n      if (!this.compiledData.cursorComparator) {\n        throw new Error(\"No cursor comparator was set!\");\n      }\n      this.compiledData.cursorComparator(cursorValue, isAfter);\n    });\n  }\n  select(exprGen: SQLGen, alias: RawAlias) {\n    this.checkLock(\"select\");\n    if (typeof alias === \"string\") {\n      // To protect against vulnerabilities such as\n      //\n      // https://github.com/brianc/node-postgres/issues/1408\n      //\n      // we need to ensure column names are safe. Turns out that GraphQL\n      // aliases are fairly strict (`[_A-Za-z][_0-9A-Za-z]*`) anyway:\n      //\n      // https://github.com/graphql/graphql-js/blob/680685dd14bd52c6475305e150e5f295ead2aa7e/src/language/lexer.js#L551-L581\n      //\n      // so this should not cause any issues in practice.\n      if (/^(\\$+|@+|[_A-Za-z])[_0-9A-Za-z]*$/.test(alias) !== true) {\n        throw new Error(`Disallowed alias '${alias}'.`);\n      }\n    }\n    this.data.select.push([exprGen, alias]);\n  }\n  selectIdentifiers(table: PgClass) {\n    if (this.selectedIdentifiers) return;\n    const primaryKey = table.primaryKeyConstraint;\n    if (!primaryKey) return;\n    const primaryKeys = primaryKey.keyAttributes;\n    this.select(\n      sql.fragment`json_build_array(${sql.join(\n        primaryKeys.map(\n          key =>\n            sql.fragment`${this.getTableAlias()}.${sql.identifier(key.name)}`\n        ),\n        \", \"\n      )})`,\n      \"__identifiers\"\n    );\n    this.selectedIdentifiers = true;\n  }\n  selectCursor(exprGen: SQLGen) {\n    this.checkLock(\"selectCursor\");\n    this.data.selectCursor = exprGen;\n  }\n  from(expr: SQLGen, alias?: SQLAlias = sql.identifier(Symbol())) {\n    this.checkLock(\"from\");\n    if (!expr) {\n      throw new Error(\"No from table source!\");\n    }\n    if (!alias) {\n      throw new Error(\"No from alias!\");\n    }\n    this.data.from = [expr, alias];\n    this.lock(\"from\");\n  }\n  // XXX: join\n  where(exprGen: SQLGen) {\n    this.checkLock(\"where\");\n    this.data.where.push(exprGen);\n  }\n  whereBound(exprGen: SQLGen, isLower: boolean) {\n    if (typeof isLower !== \"boolean\") {\n      throw new Error(\"isLower must be specified as a boolean\");\n    }\n    this.checkLock(\"whereBound\");\n    this.data.whereBound[isLower ? \"lower\" : \"upper\"].push(exprGen);\n  }\n  setOrderIsUnique() {\n    this.data.orderIsUnique = true;\n  }\n  orderBy(\n    exprGen: SQLGen,\n    ascending: boolean = true,\n    nullsFirst: boolean | null\n  ) {\n    this.checkLock(\"orderBy\");\n    this.data.orderBy.push([exprGen, ascending, nullsFirst]);\n  }\n  limit(limitGen: NumberGen) {\n    this.checkLock(\"limit\");\n\n    if (this.data.limit != null) {\n      throw new Error(\"Must only set limit once\");\n    }\n    this.data.limit = limitGen;\n  }\n  offset(offsetGen: NumberGen) {\n    this.checkLock(\"offset\");\n    if (this.data.offset != null) {\n      // Add the offsets together (this should be able to recurse)\n      const previous = this.data.offset;\n      this.data.offset = context => {\n        return (\n          callIfNecessary(previous, context) +\n          callIfNecessary(offsetGen, context)\n        );\n      };\n    } else {\n      this.data.offset = offsetGen;\n    }\n  }\n  first(first: number) {\n    this.checkLock(\"first\");\n    if (this.data.first != null) {\n      throw new Error(\"Must only set first once\");\n    }\n    this.data.first = first;\n  }\n  last(last: number) {\n    this.checkLock(\"last\");\n    if (this.data.last != null) {\n      throw new Error(\"Must only set last once\");\n    }\n    this.data.last = last;\n  }\n\n  // ----------------------------------------\n\n  isOrderUnique(lock?: boolean = true) {\n    if (lock) {\n      this.lock(\"orderBy\");\n      this.lock(\"orderIsUnique\");\n      return this.compiledData.orderIsUnique;\n    } else {\n      // This is useful inside `beforeLock(\"orderBy\", ...)` calls\n      return this.data.orderIsUnique;\n    }\n  }\n  getTableExpression(): SQL {\n    this.lock(\"from\");\n    if (!this.compiledData.from) {\n      throw new Error(\"No from table has been supplied\");\n    }\n    return this.compiledData.from[0];\n  }\n  getTableAlias(): SQL {\n    this.lock(\"from\");\n    if (!this.compiledData.from) {\n      throw new Error(\"No from table has been supplied\");\n    }\n    return this.compiledData.from[1];\n  }\n  getSelectCursor() {\n    this.lock(\"selectCursor\");\n    return this.compiledData.selectCursor;\n  }\n  getOffset() {\n    this.lock(\"offset\");\n    return this.compiledData.offset || 0;\n  }\n  getFinalLimitAndOffset() {\n    this.lock(\"offset\");\n    this.lock(\"limit\");\n    this.lock(\"first\");\n    this.lock(\"last\");\n    let limit = this.compiledData.limit;\n    let offset = this.compiledData.offset || 0;\n    let flip = false;\n    if (this.compiledData.first != null) {\n      if (limit != null) {\n        limit = Math.min(limit, this.compiledData.first);\n      } else {\n        limit = this.compiledData.first;\n      }\n    }\n    if (this.compiledData.last != null) {\n      if (offset > 0 && limit != null) {\n        throw new Error(\n          \"Issue within pagination, please report your query to graphile-build\"\n        );\n      }\n      if (limit != null) {\n        if (this.compiledData.last < limit) {\n          offset = limit - this.compiledData.last;\n          limit = this.compiledData.last;\n        } else {\n          // no need to change anything\n        }\n      } else if (offset > 0) {\n        throw new Error(\"Cannot combine 'last' and 'offset'\");\n      } else {\n        if (this.compiledData.orderBy.length > 0) {\n          flip = true;\n          limit = this.compiledData.last;\n        } else {\n          throw new Error(\"Cannot do last of an unordered set\");\n        }\n      }\n    }\n    return {\n      limit,\n      offset,\n      flip,\n    };\n  }\n  getFinalOffset() {\n    return this.getFinalLimitAndOffset().offset;\n  }\n  getFinalLimit() {\n    return this.getFinalLimitAndOffset().limit;\n  }\n  getOrderByExpressionsAndDirections() {\n    this.lock(\"orderBy\");\n    return this.compiledData.orderBy;\n  }\n  getSelectFieldsCount() {\n    this.lockEverything();\n    return this.compiledData.select.length;\n  }\n  buildSelectFields() {\n    this.lockEverything();\n    return sql.join(\n      this.compiledData.select.map(\n        ([sqlFragment, alias]) =>\n          sql.fragment`to_json(${sqlFragment}) as ${sql.identifier(alias)}`\n      ),\n      \", \"\n    );\n  }\n  buildSelectJson({\n    addNullCase,\n    addNotDistinctFromNullCase,\n  }: {\n    addNullCase?: boolean,\n    addNotDistinctFromNullCase?: boolean,\n  }) {\n    this.lockEverything();\n    let buildObject = this.compiledData.select.length\n      ? this.jsonbBuildObject(this.compiledData.select)\n      : sql.fragment`to_json(${this.getTableAlias()})`;\n    if (addNotDistinctFromNullCase) {\n      /*\n       * `is null` is not sufficient here because the record might exist but\n       * have null as each of its values; so we use `is not distinct from null`\n       * to assert that the record itself doesn't exist. This is typically used\n       * with column values.\n       */\n      buildObject = sql.fragment`(case when (${this.getTableAlias()} is not distinct from null) then null else ${buildObject} end)`;\n    } else if (addNullCase) {\n      /*\n       * `is null` is probably used here because it's the result of a function;\n       * functions seem to have trouble differentiating between `null::my_type`\n       * and  `(null,null,null)::my_type`, always opting for the latter which\n       * then causes issues with the `GraphQLNonNull`s in the schema.\n       */\n      buildObject = sql.fragment`(case when (${this.getTableAlias()} is null) then null else ${buildObject} end)`;\n    }\n    return buildObject;\n  }\n  buildWhereBoundClause(isLower: boolean) {\n    this.lock(\"whereBound\");\n    const clauses = this.compiledData.whereBound[isLower ? \"lower\" : \"upper\"];\n    if (clauses.length) {\n      return sql.fragment`(${sql.join(clauses, \") and (\")})`;\n    } else {\n      return sql.literal(true);\n    }\n  }\n  buildWhereClause(\n    includeLowerBound: boolean,\n    includeUpperBound: boolean,\n    {\n      addNullCase,\n      addNotDistinctFromNullCase,\n    }: { addNullCase?: boolean, addNotDistinctFromNullCase?: boolean }\n  ) {\n    this.lock(\"where\");\n    const clauses = [\n      /*\n       * Okay... so this is quite interesting. When we're talking about\n       * composite types, `(foo is not null)` and `not (foo is null)` are NOT\n       * equivalent! Here's why:\n       *\n       * `(foo is null)`\n       *   true if every field of the row is null\n       *\n       * `(foo is not null)`\n       *   true if every field of the row is not null\n       *\n       * `not (foo is null)`\n       *   true if there's at least one field that is not null\n       *\n       * `is [not] distinct from null` does differentiate between these cases,\n       * but when a function returns something like `select * from my_table\n       * where false`, it actually returns `(null, null, null)::my_table`,\n       * which will cause issues when we apply the `GraphQLNonNull` constraints\n       * to the results - we want to treat this as null.\n       *\n       * So don't \"simplify\" the line below! We're probably checking if the\n       * result of a function call returning a compound type was indeed null.\n       */\n      ...(addNotDistinctFromNullCase\n        ? [sql.fragment`(${this.getTableAlias()} is distinct from null)`]\n        : addNullCase\n        ? [sql.fragment`not (${this.getTableAlias()} is null)`]\n        : []),\n      ...this.compiledData.where,\n      ...(includeLowerBound ? [this.buildWhereBoundClause(true)] : []),\n      ...(includeUpperBound ? [this.buildWhereBoundClause(false)] : []),\n    ];\n    return clauses.length\n      ? sql.fragment`(${sql.join(clauses, \") and (\")})`\n      : sql.fragment`1 = 1`;\n  }\n  build(\n    options: {\n      asJson?: boolean,\n      asJsonAggregate?: boolean,\n      onlyJsonField?: boolean,\n      addNullCase?: boolean,\n      addNotDistinctFromNullCase?: boolean,\n      useAsterisk?: boolean,\n    } = {}\n  ) {\n    const {\n      asJson = false,\n      asJsonAggregate = false,\n      onlyJsonField = false,\n      addNullCase = false,\n      addNotDistinctFromNullCase = false,\n      useAsterisk = false,\n    } = options;\n\n    this.lockEverything();\n    if (onlyJsonField) {\n      return this.buildSelectJson({ addNullCase, addNotDistinctFromNullCase });\n    }\n    const { limit, offset, flip } = this.getFinalLimitAndOffset();\n    const fields =\n      asJson || asJsonAggregate\n        ? sql.fragment`${this.buildSelectJson({\n            addNullCase,\n            addNotDistinctFromNullCase,\n          })} as object`\n        : this.buildSelectFields();\n\n    let fragment = sql.fragment`\\\nselect ${useAsterisk ? sql.fragment`${this.getTableAlias()}.*` : fields}\n${this.compiledData.from &&\n  sql.fragment`from ${this.compiledData.from[0]} as ${this.getTableAlias()}`}\n${this.compiledData.join.length && sql.join(this.compiledData.join, \" \")}\nwhere ${this.buildWhereClause(true, true, options)}\n${\n  this.compiledData.orderBy.length\n    ? sql.fragment`order by ${sql.join(\n        this.compiledData.orderBy.map(\n          ([expr, ascending, nullsFirst]) =>\n            sql.fragment`${expr} ${\n              Number(ascending) ^ Number(flip)\n                ? sql.fragment`ASC`\n                : sql.fragment`DESC`\n            }${\n              nullsFirst === true\n                ? sql.fragment` NULLS FIRST`\n                : nullsFirst === false\n                ? sql.fragment` NULLS LAST`\n                : null\n            }`\n        ),\n        \",\"\n      )}`\n    : \"\"\n}\n${isSafeInteger(limit) && sql.fragment`limit ${sql.literal(limit)}`}\n${offset && sql.fragment`offset ${sql.literal(offset)}`}`;\n    if (flip) {\n      const flipAlias = Symbol();\n      fragment = sql.fragment`\\\nwith ${sql.identifier(flipAlias)} as (\n  ${fragment}\n)\nselect *\nfrom ${sql.identifier(flipAlias)}\norder by (row_number() over (partition by 1)) desc`;\n    }\n    if (useAsterisk) {\n      fragment = sql.fragment`select ${fields} from (${fragment}) ${this.getTableAlias()}`;\n    }\n    if (asJsonAggregate) {\n      const aggAlias = Symbol();\n      fragment = sql.fragment`select json_agg(${sql.identifier(\n        aggAlias,\n        \"object\"\n      )}) from (${fragment}) as ${sql.identifier(aggAlias)}`;\n      fragment = sql.fragment`select coalesce((${fragment}), '[]'::json)`;\n    }\n    return fragment;\n  }\n\n  // ----------------------------------------\n\n  _finalize() {\n    this.finalized = true;\n  }\n  lock(type: string) {\n    if (this.locks[type]) return;\n    const context = this.lockContext;\n    const { beforeLock } = this.data;\n    let locks = beforeLock[type];\n    if (locks) {\n      beforeLock[type] = [];\n      for (let i = 0, l = locks.length; i < l; i++) {\n        locks[i]();\n      }\n    }\n    if (type !== \"select\") {\n      this.locks[type] = isDev ? new Error(\"Initally locked here\").stack : true;\n    }\n    if (type === \"cursorComparator\") {\n      // It's meant to be a function\n      this.compiledData[type] = this.data[type];\n    } else if (type === \"whereBound\") {\n      // Handle properties separately\n      this.compiledData[type].lower = callIfNecessaryArray(\n        this.data[type].lower,\n        context\n      );\n      this.compiledData[type].upper = callIfNecessaryArray(\n        this.data[type].upper,\n        context\n      );\n    } else if (type === \"select\") {\n      /*\n       * NOTICE: locking select can cause additional selects to be added, so the\n       * length of this.data[type] may increase during the operation. This is\n       * why we handle this.locks[type] separately.\n       */\n\n      // Assume that duplicate fields must be identical, don't output the same\n      // key multiple times\n      const seenFields = {};\n      const data = [];\n      const selects = this.data[type];\n\n      // DELIBERATE slow loop, see NOTICE above\n      for (let i = 0; i < selects.length; i++) {\n        const [valueOrGenerator, columnName] = selects[i];\n        // $FlowFixMe\n        if (!seenFields[columnName]) {\n          // $FlowFixMe\n          seenFields[columnName] = true;\n          data.push([callIfNecessary(valueOrGenerator, context), columnName]);\n          locks = beforeLock[type];\n          if (locks) {\n            beforeLock[type] = [];\n            for (let i = 0, l = locks.length; i < l; i++) {\n              locks[i]();\n            }\n          }\n        }\n      }\n      this.locks[type] = isDev ? new Error(\"Initally locked here\").stack : true;\n      this.compiledData[type] = data;\n    } else if (type === \"orderBy\") {\n      this.compiledData[type] = this.data[type].map(([a, b, c]) => [\n        callIfNecessary(a, context),\n        b,\n        c,\n      ]);\n    } else if (type === \"from\") {\n      if (this.data.from) {\n        const f = this.data.from;\n        this.compiledData.from = [callIfNecessary(f[0], context), f[1]];\n      }\n    } else if (type === \"join\" || type === \"where\") {\n      this.compiledData[type] = callIfNecessaryArray(this.data[type], context);\n    } else if (type === \"selectCursor\") {\n      this.compiledData[type] = callIfNecessary(this.data[type], context);\n    } else if (type === \"cursorPrefix\") {\n      this.compiledData[type] = this.data[type];\n    } else if (type === \"orderIsUnique\") {\n      this.compiledData[type] = this.data[type];\n    } else if (type === \"limit\") {\n      this.compiledData[type] = callIfNecessary(this.data[type], context);\n    } else if (type === \"offset\") {\n      this.compiledData[type] = callIfNecessary(this.data[type], context);\n    } else if (type === \"first\") {\n      this.compiledData[type] = this.data[type];\n    } else if (type === \"last\") {\n      this.compiledData[type] = this.data[type];\n    } else {\n      throw new Error(`Wasn't expecting to lock '${type}'`);\n    }\n  }\n  checkLock(type: string) {\n    if (this.locks[type]) {\n      if (typeof this.locks[type] === \"string\") {\n        throw new Error(\n          `'${type}' has already been locked\\n    ` +\n            this.locks[type].replace(/\\n/g, \"\\n    \") +\n            \"\\n\"\n        );\n      }\n      throw new Error(`'${type}' has already been locked`);\n    }\n  }\n  lockEverything() {\n    this._finalize();\n    // We must execute everything after `from` so we have the alias to reference\n    this.lock(\"from\");\n    this.lock(\"join\");\n    this.lock(\"orderBy\");\n    // We must execute where after orderBy because cursor queries require all orderBy columns\n    this.lock(\"cursorComparator\");\n    this.lock(\"whereBound\");\n    this.lock(\"where\");\n    // 'where' -> 'whereBound' can affect 'offset'/'limit'\n    this.lock(\"offset\");\n    this.lock(\"limit\");\n    this.lock(\"first\");\n    this.lock(\"last\");\n    // We must execute select after orderBy otherwise we cannot generate a cursor\n    this.lock(\"selectCursor\");\n    this.lock(\"select\");\n  }\n}\n\nexport default QueryBuilder;\n"],"file":"QueryBuilder.js"}